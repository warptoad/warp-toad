
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  type AbiType,
  AztecAddress,
  type AztecAddressLike,
  CompleteAddress,
  Contract,
  type ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  type ContractInstanceWithAddress,
  type ContractMethod,
  type ContractStorageLayout,
  type ContractNotes,
  decodeFromAbi,
  DeployMethod,
  EthAddress,
  type EthAddressLike,
  EventSelector,
  type FieldLike,
  Fr,
  type FunctionSelectorLike,
  loadContractArtifact,
  loadContractArtifactForPublic,
  type NoirCompiledContract,
  NoteSelector,
  Point,
  type PublicKey,
  PublicKeys,
  type Wallet,
  type U128Like,
  type WrappedFieldLike,
} from '@aztec/aztec.js';
//@ts-ignore
import L2AztecBridgeAdapterContractArtifactJson from '../../target/L2AztecBridgeAdapter-L2AztecBridgeAdapter.json' with {type:"json"};
export const L2AztecBridgeAdapterContractArtifact = loadContractArtifact(L2AztecBridgeAdapterContractArtifactJson as NoirCompiledContract);



/**
 * Type-safe interface for contract L2AztecBridgeAdapter;
 */
export class L2AztecBridgeAdapterContract extends ContractBase {
  
  private constructor(
    instance: ContractInstanceWithAddress,
    wallet: Wallet,
  ) {
    super(instance, L2AztecBridgeAdapterContractArtifact, wallet);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, L2AztecBridgeAdapterContract.artifact, wallet) as Promise<L2AztecBridgeAdapterContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, l1BridgeAdapter: EthAddressLike) {
    return new DeployMethod<L2AztecBridgeAdapterContract>(PublicKeys.default(), wallet, L2AztecBridgeAdapterContractArtifact, L2AztecBridgeAdapterContract.at, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
   */
  public static deployWithPublicKeys(publicKeys: PublicKeys, wallet: Wallet, l1BridgeAdapter: EthAddressLike) {
    return new DeployMethod<L2AztecBridgeAdapterContract>(publicKeys, wallet, L2AztecBridgeAdapterContractArtifact, L2AztecBridgeAdapterContract.at, Array.from(arguments).slice(2));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof L2AztecBridgeAdapterContract['methods']>(
    opts: { publicKeys?: PublicKeys; method?: M; wallet: Wallet },
    ...args: Parameters<L2AztecBridgeAdapterContract['methods'][M]>
  ) {
    return new DeployMethod<L2AztecBridgeAdapterContract>(
      opts.publicKeys ?? PublicKeys.default(),
      opts.wallet,
      L2AztecBridgeAdapterContractArtifact,
      L2AztecBridgeAdapterContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return L2AztecBridgeAdapterContractArtifact;
  }

  /**
   * Returns this contract's artifact with public bytecode.
   */
  public static get artifactForPublic(): ContractArtifact {
    return loadContractArtifactForPublic(L2AztecBridgeAdapterContractArtifactJson as NoirCompiledContract);
  }
  

  public static get storage(): ContractStorageLayout<'l1BridgeAdapter' | 'counter'> {
      return {
        l1BridgeAdapter: {
      slot: new Fr(1n),
    },
counter: {
      slot: new Fr(3n),
    }
      } as ContractStorageLayout<'l1BridgeAdapter' | 'counter'>;
    }
    

  public static get notes(): ContractNotes<'ValueNote' | 'UintNote' | 'WarpToadNote'> {
    return {
      ValueNote: {
          id: new NoteSelector(0),
        },
UintNote: {
          id: new NoteSelector(1),
        },
WarpToadNote: {
          id: new NoteSelector(2),
        }
    } as ContractNotes<'ValueNote' | 'UintNote' | 'WarpToadNote'>;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public declare methods: {
    
    /** constructor(l1BridgeAdapter: struct) */
    constructor: ((l1BridgeAdapter: EthAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** count(new_count: field) */
    count: ((new_count: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_l1BridgeAdapter_public() */
    get_l1BridgeAdapter_public: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** process_message(message_ciphertext: struct, message_context: struct) */
    process_message: ((message_ciphertext: FieldLike[], message_context: { tx_hash: FieldLike, unique_note_hashes_in_tx: FieldLike[], first_nullifier_in_tx: FieldLike, recipient: AztecAddressLike }) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** public_dispatch(selector: field) */
    public_dispatch: ((selector: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** receive_giga_root(new_gigaroot: field, message_leaf_index: field, warpToadCore: struct) */
    receive_giga_root: ((new_gigaroot: FieldLike, message_leaf_index: FieldLike, warpToadCore: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** send_root_to_l1(block_number: integer) */
    send_root_to_l1: ((block_number: (bigint | number)) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** sync_private_state() */
    sync_private_state: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };

  
}
