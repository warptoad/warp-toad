/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IERC1363",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1363__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "IL1ScrollMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1ScrollMessenger__factory>;
    getContractFactory(
      name: "IL2ScrollMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2ScrollMessenger__factory>;
    getContractFactory(
      name: "IScrollMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScrollMessenger__factory>;
    getContractFactory(
      name: "LazyIMT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LazyIMT__factory>;
    getContractFactory(
      name: "L1AztecBridgeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1AztecBridgeAdapter__factory>;
    getContractFactory(
      name: "L1ScrollBridgeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ScrollBridgeAdapter__factory>;
    getContractFactory(
      name: "L2ScrollBridgeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2ScrollBridgeAdapter__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "ICoinIssuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICoinIssuer__factory>;
    getContractFactory(
      name: "IFeeJuicePortal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeJuicePortal__factory>;
    getContractFactory(
      name: "IGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernance__factory>;
    getContractFactory(
      name: "IGovernanceProposer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernanceProposer__factory>;
    getContractFactory(
      name: "IInstance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInstance__factory>;
    getContractFactory(
      name: "IMintableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMintableERC20__factory>;
    getContractFactory(
      name: "IPayload",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPayload__factory>;
    getContractFactory(
      name: "IRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegistry__factory>;
    getContractFactory(
      name: "IRewardDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardDistributor__factory>;
    getContractFactory(
      name: "IRollup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRollup__factory>;
    getContractFactory(
      name: "IRollupCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRollupCore__factory>;
    getContractFactory(
      name: "ITestRollup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITestRollup__factory>;
    getContractFactory(
      name: "ISlasher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISlasher__factory>;
    getContractFactory(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaking__factory>;
    getContractFactory(
      name: "IStakingCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingCore__factory>;
    getContractFactory(
      name: "IValidatorSelection",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IValidatorSelection__factory>;
    getContractFactory(
      name: "IValidatorSelectionCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IValidatorSelectionCore__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "IInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInbox__factory>;
    getContractFactory(
      name: "IOutbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOutbox__factory>;
    getContractFactory(
      name: "BlobLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlobLib__factory>;
    getContractFactory(
      name: "Vm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vm__factory>;
    getContractFactory(
      name: "VmSafe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VmSafe__factory>;
    getContractFactory(
      name: "GigaBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GigaBridge__factory>;
    getContractFactory(
      name: "IGigaBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGigaBridge__factory>;
    getContractFactory(
      name: "IL1BridgeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1BridgeAdapter__factory>;
    getContractFactory(
      name: "IGigaRootProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGigaRootProvider__factory>;
    getContractFactory(
      name: "IGigaRootRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGigaRootRecipient__factory>;
    getContractFactory(
      name: "ILocalRootProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILocalRootProvider__factory>;
    getContractFactory(
      name: "IWarpToadCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWarpToadCore__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "USDcoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDcoin__factory>;
    getContractFactory(
      name: "L1WarpToad",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1WarpToad__factory>;
    getContractFactory(
      name: "L2WarpToad",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2WarpToad__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "WarpToadCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WarpToadCore__factory>;
    getContractFactory(
      name: "BaseUltraVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseUltraVerifier__factory>;
    getContractFactory(
      name: "WithdrawVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithdrawVerifier__factory>;
    getContractFactory(
      name: "PoseidonT3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT3__factory>;

    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IERC1363",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1363>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "IL1ScrollMessenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1ScrollMessenger>;
    getContractAt(
      name: "IL2ScrollMessenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2ScrollMessenger>;
    getContractAt(
      name: "IScrollMessenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IScrollMessenger>;
    getContractAt(
      name: "LazyIMT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LazyIMT>;
    getContractAt(
      name: "L1AztecBridgeAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.L1AztecBridgeAdapter>;
    getContractAt(
      name: "L1ScrollBridgeAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ScrollBridgeAdapter>;
    getContractAt(
      name: "L2ScrollBridgeAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.L2ScrollBridgeAdapter>;
    getContractAt(
      name: "Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "ICoinIssuer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICoinIssuer>;
    getContractAt(
      name: "IFeeJuicePortal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeJuicePortal>;
    getContractAt(
      name: "IGovernance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernance>;
    getContractAt(
      name: "IGovernanceProposer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernanceProposer>;
    getContractAt(
      name: "IInstance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IInstance>;
    getContractAt(
      name: "IMintableERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMintableERC20>;
    getContractAt(
      name: "IPayload",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPayload>;
    getContractAt(
      name: "IRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegistry>;
    getContractAt(
      name: "IRewardDistributor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardDistributor>;
    getContractAt(
      name: "IRollup",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRollup>;
    getContractAt(
      name: "IRollupCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRollupCore>;
    getContractAt(
      name: "ITestRollup",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITestRollup>;
    getContractAt(
      name: "ISlasher",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISlasher>;
    getContractAt(
      name: "IStaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaking>;
    getContractAt(
      name: "IStakingCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingCore>;
    getContractAt(
      name: "IValidatorSelection",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IValidatorSelection>;
    getContractAt(
      name: "IValidatorSelectionCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IValidatorSelectionCore>;
    getContractAt(
      name: "IVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "IInbox",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IInbox>;
    getContractAt(
      name: "IOutbox",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOutbox>;
    getContractAt(
      name: "BlobLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BlobLib>;
    getContractAt(
      name: "Vm",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Vm>;
    getContractAt(
      name: "VmSafe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VmSafe>;
    getContractAt(
      name: "GigaBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GigaBridge>;
    getContractAt(
      name: "IGigaBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGigaBridge>;
    getContractAt(
      name: "IL1BridgeAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1BridgeAdapter>;
    getContractAt(
      name: "IGigaRootProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGigaRootProvider>;
    getContractAt(
      name: "IGigaRootRecipient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGigaRootRecipient>;
    getContractAt(
      name: "ILocalRootProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILocalRootProvider>;
    getContractAt(
      name: "IWarpToadCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWarpToadCore>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "USDcoin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.USDcoin>;
    getContractAt(
      name: "L1WarpToad",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.L1WarpToad>;
    getContractAt(
      name: "L2WarpToad",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.L2WarpToad>;
    getContractAt(
      name: "IVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "WarpToadCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WarpToadCore>;
    getContractAt(
      name: "BaseUltraVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseUltraVerifier>;
    getContractAt(
      name: "WithdrawVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithdrawVerifier>;
    getContractAt(
      name: "PoseidonT3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT3>;

    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC1363",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1363>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "IL1ScrollMessenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL1ScrollMessenger>;
    deployContract(
      name: "IL2ScrollMessenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2ScrollMessenger>;
    deployContract(
      name: "IScrollMessenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IScrollMessenger>;
    deployContract(
      name: "LazyIMT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LazyIMT>;
    deployContract(
      name: "L1AztecBridgeAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1AztecBridgeAdapter>;
    deployContract(
      name: "L1ScrollBridgeAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1ScrollBridgeAdapter>;
    deployContract(
      name: "L2ScrollBridgeAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L2ScrollBridgeAdapter>;
    deployContract(
      name: "Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "ICoinIssuer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICoinIssuer>;
    deployContract(
      name: "IFeeJuicePortal",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeJuicePortal>;
    deployContract(
      name: "IGovernance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernance>;
    deployContract(
      name: "IGovernanceProposer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernanceProposer>;
    deployContract(
      name: "IInstance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInstance>;
    deployContract(
      name: "IMintableERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMintableERC20>;
    deployContract(
      name: "IPayload",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPayload>;
    deployContract(
      name: "IRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRegistry>;
    deployContract(
      name: "IRewardDistributor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewardDistributor>;
    deployContract(
      name: "IRollup",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRollup>;
    deployContract(
      name: "IRollupCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRollupCore>;
    deployContract(
      name: "ITestRollup",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITestRollup>;
    deployContract(
      name: "ISlasher",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISlasher>;
    deployContract(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStaking>;
    deployContract(
      name: "IStakingCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakingCore>;
    deployContract(
      name: "IValidatorSelection",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValidatorSelection>;
    deployContract(
      name: "IValidatorSelectionCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValidatorSelectionCore>;
    deployContract(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVerifier>;
    deployContract(
      name: "IInbox",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInbox>;
    deployContract(
      name: "IOutbox",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOutbox>;
    deployContract(
      name: "BlobLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlobLib>;
    deployContract(
      name: "Vm",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vm>;
    deployContract(
      name: "VmSafe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VmSafe>;
    deployContract(
      name: "GigaBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GigaBridge>;
    deployContract(
      name: "IGigaBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGigaBridge>;
    deployContract(
      name: "IL1BridgeAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL1BridgeAdapter>;
    deployContract(
      name: "IGigaRootProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGigaRootProvider>;
    deployContract(
      name: "IGigaRootRecipient",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGigaRootRecipient>;
    deployContract(
      name: "ILocalRootProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILocalRootProvider>;
    deployContract(
      name: "IWarpToadCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWarpToadCore>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "USDcoin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.USDcoin>;
    deployContract(
      name: "L1WarpToad",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1WarpToad>;
    deployContract(
      name: "L2WarpToad",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L2WarpToad>;
    deployContract(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVerifier>;
    deployContract(
      name: "WarpToadCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WarpToadCore>;
    deployContract(
      name: "BaseUltraVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseUltraVerifier>;
    deployContract(
      name: "WithdrawVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithdrawVerifier>;
    deployContract(
      name: "PoseidonT3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoseidonT3>;

    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC1363",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1363>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "IL1ScrollMessenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL1ScrollMessenger>;
    deployContract(
      name: "IL2ScrollMessenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL2ScrollMessenger>;
    deployContract(
      name: "IScrollMessenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IScrollMessenger>;
    deployContract(
      name: "LazyIMT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LazyIMT>;
    deployContract(
      name: "L1AztecBridgeAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1AztecBridgeAdapter>;
    deployContract(
      name: "L1ScrollBridgeAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1ScrollBridgeAdapter>;
    deployContract(
      name: "L2ScrollBridgeAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L2ScrollBridgeAdapter>;
    deployContract(
      name: "Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "ICoinIssuer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICoinIssuer>;
    deployContract(
      name: "IFeeJuicePortal",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeJuicePortal>;
    deployContract(
      name: "IGovernance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernance>;
    deployContract(
      name: "IGovernanceProposer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernanceProposer>;
    deployContract(
      name: "IInstance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInstance>;
    deployContract(
      name: "IMintableERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMintableERC20>;
    deployContract(
      name: "IPayload",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPayload>;
    deployContract(
      name: "IRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRegistry>;
    deployContract(
      name: "IRewardDistributor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewardDistributor>;
    deployContract(
      name: "IRollup",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRollup>;
    deployContract(
      name: "IRollupCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRollupCore>;
    deployContract(
      name: "ITestRollup",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITestRollup>;
    deployContract(
      name: "ISlasher",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISlasher>;
    deployContract(
      name: "IStaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStaking>;
    deployContract(
      name: "IStakingCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakingCore>;
    deployContract(
      name: "IValidatorSelection",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValidatorSelection>;
    deployContract(
      name: "IValidatorSelectionCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValidatorSelectionCore>;
    deployContract(
      name: "IVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVerifier>;
    deployContract(
      name: "IInbox",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInbox>;
    deployContract(
      name: "IOutbox",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOutbox>;
    deployContract(
      name: "BlobLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlobLib>;
    deployContract(
      name: "Vm",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vm>;
    deployContract(
      name: "VmSafe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VmSafe>;
    deployContract(
      name: "GigaBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GigaBridge>;
    deployContract(
      name: "IGigaBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGigaBridge>;
    deployContract(
      name: "IL1BridgeAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IL1BridgeAdapter>;
    deployContract(
      name: "IGigaRootProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGigaRootProvider>;
    deployContract(
      name: "IGigaRootRecipient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGigaRootRecipient>;
    deployContract(
      name: "ILocalRootProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILocalRootProvider>;
    deployContract(
      name: "IWarpToadCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWarpToadCore>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "USDcoin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.USDcoin>;
    deployContract(
      name: "L1WarpToad",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L1WarpToad>;
    deployContract(
      name: "L2WarpToad",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.L2WarpToad>;
    deployContract(
      name: "IVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVerifier>;
    deployContract(
      name: "WarpToadCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WarpToadCore>;
    deployContract(
      name: "BaseUltraVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseUltraVerifier>;
    deployContract(
      name: "WithdrawVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithdrawVerifier>;
    deployContract(
      name: "PoseidonT3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoseidonT3>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
