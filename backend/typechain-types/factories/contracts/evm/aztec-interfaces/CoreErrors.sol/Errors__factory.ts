/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Errors,
  ErrorsInterface,
} from "../../../../../contracts/evm/aztec-interfaces/CoreErrors.sol/Errors";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "expected",
        type: "address",
      },
      {
        internalType: "address",
        name: "actual",
        type: "address",
      },
    ],
    name: "DevNet__InvalidProposer",
    type: "error",
  },
  {
    inputs: [],
    name: "DevNet__NoPruningAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "FeeJuicePortal__AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "FeeJuicePortal__InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "FeeJuicePortal__Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "FeeLib__InvalidFeeAssetPriceModifier",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256",
      },
    ],
    name: "HeaderLib__InvalidHeaderSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Slot",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "Slot",
        name: "actual",
        type: "uint256",
      },
    ],
    name: "HeaderLib__InvalidSlotNumber",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "actor",
        type: "bytes32",
      },
    ],
    name: "Inbox__ActorTooLarge",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "content",
        type: "bytes32",
      },
    ],
    name: "Inbox__ContentTooLarge",
    type: "error",
  },
  {
    inputs: [],
    name: "Inbox__MustBuildBeforeConsume",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "secretHash",
        type: "bytes32",
      },
    ],
    name: "Inbox__SecretHashTooLarge",
    type: "error",
  },
  {
    inputs: [],
    name: "Inbox__Unauthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256",
      },
    ],
    name: "Inbox__VersionMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "leafIndex",
        type: "uint256",
      },
    ],
    name: "MerkleLib__InvalidRoot",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "l2BlockNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "leafIndex",
        type: "uint256",
      },
    ],
    name: "Outbox__AlreadyNullified",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "l2BlockNumber",
        type: "uint256",
      },
    ],
    name: "Outbox__BlockNotProven",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "storedFee",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "feePassed",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "storedVersion",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "versionPassed",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "storedDeadline",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "deadlinePassed",
        type: "uint32",
      },
    ],
    name: "Outbox__IncompatibleEntryArguments",
    type: "error",
  },
  {
    inputs: [],
    name: "Outbox__InvalidChainId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256",
      },
    ],
    name: "Outbox__InvalidPathLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expected",
        type: "address",
      },
      {
        internalType: "address",
        name: "actual",
        type: "address",
      },
    ],
    name: "Outbox__InvalidRecipient",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32",
      },
    ],
    name: "Outbox__NothingToConsume",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "l2BlockNumber",
        type: "uint256",
      },
    ],
    name: "Outbox__NothingToConsumeAtBlock",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "l2BlockNumber",
        type: "uint256",
      },
    ],
    name: "Outbox__RootAlreadySetAtBlock",
    type: "error",
  },
  {
    inputs: [],
    name: "Outbox__Unauthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256",
      },
    ],
    name: "Outbox__VersionMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requested",
        type: "uint256",
      },
    ],
    name: "ProofCommitmentEscrow__InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "ProofCommitmentEscrow__NotOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "current",
        type: "uint256",
      },
      {
        internalType: "Timestamp",
        name: "readyAt",
        type: "uint256",
      },
    ],
    name: "ProofCommitmentEscrow__WithdrawRequestNotReady",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "prover",
        type: "address",
      },
      {
        internalType: "Epoch",
        name: "epoch",
        type: "uint256",
      },
    ],
    name: "Rollup__AlreadyClaimed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minimum",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "provided",
        type: "uint256",
      },
    ],
    name: "Rollup__InsufficientBondAmount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
    ],
    name: "Rollup__InsufficientFundsInEscrow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32",
      },
    ],
    name: "Rollup__InvalidArchive",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "basisPointFee",
        type: "uint256",
      },
    ],
    name: "Rollup__InvalidBasisPointFee",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "blobHash",
        type: "bytes32",
      },
    ],
    name: "Rollup__InvalidBlobHash",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "blobHash",
        type: "bytes32",
      },
    ],
    name: "Rollup__InvalidBlobProof",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32",
      },
    ],
    name: "Rollup__InvalidBlobPublicInputsHash",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32",
      },
    ],
    name: "Rollup__InvalidBlockHash",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256",
      },
    ],
    name: "Rollup__InvalidBlockNumber",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256",
      },
    ],
    name: "Rollup__InvalidChainId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32",
      },
    ],
    name: "Rollup__InvalidInHash",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256",
      },
    ],
    name: "Rollup__InvalidManaBaseFee",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32",
      },
    ],
    name: "Rollup__InvalidPreviousArchive",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32",
      },
    ],
    name: "Rollup__InvalidPreviousBlockHash",
    type: "error",
  },
  {
    inputs: [],
    name: "Rollup__InvalidProof",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32",
      },
    ],
    name: "Rollup__InvalidProposedArchive",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Timestamp",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "Timestamp",
        name: "actual",
        type: "uint256",
      },
    ],
    name: "Rollup__InvalidTimestamp",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256",
      },
    ],
    name: "Rollup__InvalidVersion",
    type: "error",
  },
  {
    inputs: [],
    name: "Rollup__ManaLimitExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "Rollup__NoEpochToProve",
    type: "error",
  },
  {
    inputs: [],
    name: "Rollup__NonSequentialProving",
    type: "error",
  },
  {
    inputs: [],
    name: "Rollup__NonZeroDaFee",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Slot",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "Slot",
        name: "currentSlot",
        type: "uint256",
      },
    ],
    name: "Rollup__NotPastDeadline",
    type: "error",
  },
  {
    inputs: [],
    name: "Rollup__NothingToPrune",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Slot",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "Slot",
        name: "currentSlot",
        type: "uint256",
      },
    ],
    name: "Rollup__PastDeadline",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "prover",
        type: "address",
      },
      {
        internalType: "Epoch",
        name: "epoch",
        type: "uint256",
      },
    ],
    name: "Rollup__ProverHaveAlreadySubmitted",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Slot",
        name: "lastSlot",
        type: "uint256",
      },
      {
        internalType: "Slot",
        name: "proposedSlot",
        type: "uint256",
      },
    ],
    name: "Rollup__SlotAlreadyInChain",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Epoch",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "Epoch",
        name: "end",
        type: "uint256",
      },
    ],
    name: "Rollup__StartAndEndNotSameEpoch",
    type: "error",
  },
  {
    inputs: [],
    name: "Rollup__StartIsNotBuildingOnProven",
    type: "error",
  },
  {
    inputs: [],
    name: "Rollup__StartIsNotFirstBlockOfEpoch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Timestamp",
        name: "max",
        type: "uint256",
      },
      {
        internalType: "Timestamp",
        name: "actual",
        type: "uint256",
      },
    ],
    name: "Rollup__TimestampInFuture",
    type: "error",
  },
  {
    inputs: [],
    name: "Rollup__TimestampTooOld",
    type: "error",
  },
  {
    inputs: [],
    name: "Rollup__TryingToProveNonExistingBlock",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "txsHash",
        type: "bytes32",
      },
    ],
    name: "Rollup__UnavailableTxs",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requested",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bound",
        type: "uint256",
      },
    ],
    name: "SampleLib__IndexOutOfBounds",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "sample",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "SampleLib__SampleLargerThanIndex",
    type: "error",
  },
  {
    inputs: [],
    name: "SignatureLib__CannotVerifyEmpty",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expected",
        type: "address",
      },
      {
        internalType: "address",
        name: "recovered",
        type: "address",
      },
    ],
    name: "SignatureLib__InvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "attester",
        type: "address",
      },
    ],
    name: "Staking__AlreadyActive",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "Staking__AlreadyRegistered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "Staking__CannotSlashExitedStake",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "Staking__FailedToRemove",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "Staking__InsufficientStake",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "attester",
        type: "address",
      },
      {
        internalType: "address",
        name: "proposer",
        type: "address",
      },
    ],
    name: "Staking__InvalidDeposit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "Staking__NoOneToSlash",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "Staking__NotExiting",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "Staking__NotSlasher",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "Staking__NotWithdrawer",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "Staking__NothingToExit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Timestamp",
        name: "",
        type: "uint256",
      },
      {
        internalType: "Timestamp",
        name: "",
        type: "uint256",
      },
    ],
    name: "Staking__WithdrawalNotUnlockedYet",
    type: "error",
  },
  {
    inputs: [],
    name: "ValidatorSelection__EpochNotSetup",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minimumNeeded",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "provided",
        type: "uint256",
      },
    ],
    name: "ValidatorSelection__InsufficientAttestations",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minimumNeeded",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "provided",
        type: "uint256",
      },
    ],
    name: "ValidatorSelection__InsufficientAttestationsProvided",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "attester",
        type: "address",
      },
      {
        internalType: "address",
        name: "proposer",
        type: "address",
      },
    ],
    name: "ValidatorSelection__InvalidDeposit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expected",
        type: "address",
      },
      {
        internalType: "address",
        name: "actual",
        type: "address",
      },
    ],
    name: "ValidatorSelection__InvalidProposer",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220dfe859e23e0b2b9e63fd148d5e549cc55cd5169270fbf869afa285012014f94164736f6c634300081d0033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Errors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Errors__factory {
    return super.connect(runner) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Errors {
    return new Contract(address, _abi, runner) as unknown as Errors;
  }
}
