/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Errors,
  ErrorsInterface,
} from "../../../../../contracts/evm/aztec-interfaces/GovernanceErrors.sol/Errors";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "CoinIssuer__InsufficientMintAvailable",
    type: "error",
  },
  {
    inputs: [],
    name: "GovernanceProposer__CanOnlyExecuteProposalInPast",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IPayload",
        name: "proposal",
        type: "address",
      },
    ],
    name: "GovernanceProposer__FailedToPropose",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "instance",
        type: "address",
      },
    ],
    name: "GovernanceProposer__InstanceHaveNoCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votesCast",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "votesNeeded",
        type: "uint256",
      },
    ],
    name: "GovernanceProposer__InsufficientVotes",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "m",
        type: "uint256",
      },
    ],
    name: "GovernanceProposer__InvalidNAndMValues",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "m",
        type: "uint256",
      },
    ],
    name: "GovernanceProposer__NCannotBeLargerTHanM",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "proposer",
        type: "address",
      },
    ],
    name: "GovernanceProposer__OnlyProposerCanVote",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundNumber",
        type: "uint256",
      },
    ],
    name: "GovernanceProposer__ProposalAlreadyExecuted",
    type: "error",
  },
  {
    inputs: [],
    name: "GovernanceProposer__ProposalCannotBeAddressZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IPayload",
        name: "proposal",
        type: "address",
      },
    ],
    name: "GovernanceProposer__ProposalHaveNoCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentRoundNumber",
        type: "uint256",
      },
    ],
    name: "GovernanceProposer__ProposalTooOld",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Slot",
        name: "slot",
        type: "uint256",
      },
    ],
    name: "GovernanceProposer__VoteAlreadyCastForSlot",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "Governance__CallFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "governanceProposer",
        type: "address",
      },
    ],
    name: "Governance__CallerNotGovernanceProposer",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "self",
        type: "address",
      },
    ],
    name: "Governance__CallerNotSelf",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__CannotCallAsset",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ConfigurationLib__DifferentialTooBig",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ConfigurationLib__DifferentialTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ConfigurationLib__InvalidMinimumVotes",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ConfigurationLib__LockAmountTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ConfigurationLib__QuorumTooBig",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ConfigurationLib__QuorumTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "Governance__ConfigurationLib__TimeTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "Governance__ConfigurationLib__TimeTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "have",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
    ],
    name: "Governance__InsufficientPower",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__InvalidConfiguration",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__NoCheckpointsFound",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ProposalAlreadyDropped",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ProposalCannotBeDropped",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "Governance__ProposalDoesNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ProposalLib__MoreVoteThanExistNeeded",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ProposalLib__MoreYeaVoteThanExistNeeded",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ProposalLib__ZeroMinimum",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ProposalLib__ZeroVotesNeeded",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ProposalLib__ZeroYeaVotesNeeded",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ProposalNotActive",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__ProposalNotExecutable",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__UserLib__NotInPast",
    type: "error",
  },
  {
    inputs: [],
    name: "Governance__WithdrawalAlreadyclaimed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Timestamp",
        name: "currentTime",
        type: "uint256",
      },
      {
        internalType: "Timestamp",
        name: "unlocksAt",
        type: "uint256",
      },
    ],
    name: "Governance__WithdrawalNotUnlockedYet",
    type: "error",
  },
  {
    inputs: [],
    name: "Registry__NoRollupsRegistered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rollup",
        type: "address",
      },
    ],
    name: "Registry__RollupAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
    ],
    name: "Registry__RollupNotRegistered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "canonical",
        type: "address",
      },
    ],
    name: "RewardDistributor__InvalidCaller",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea264697066735822122030ac278acd94c2ea11a5517b436eede93f6bd0e2f3d83c787ba701645dc93bd564736f6c634300081d0033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Errors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Errors__factory {
    return super.connect(runner) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Errors {
    return new Contract(address, _abi, runner) as unknown as Errors;
  }
}
