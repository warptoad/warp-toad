/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IRollupCore,
  IRollupCoreInterface,
} from "../../../../../contracts/evm/aztec-interfaces/IRollup.sol/IRollupCore";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "archive",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "versionedBlobHashes",
        type: "bytes32[]",
      },
    ],
    name: "L2BlockProposed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "proverId",
        type: "address",
      },
    ],
    name: "L2ProofVerified",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "provenBlockNumber",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "pendingBlockNumber",
        type: "uint256",
      },
    ],
    name: "PrunedPending",
    type: "event",
  },
  {
    inputs: [],
    name: "L1_BLOCK_AT_GENESIS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "Epoch[]",
        name: "_epochs",
        type: "uint256[]",
      },
    ],
    name: "claimProverRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
    ],
    name: "claimSequencerRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "archive",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "feeAssetPriceModifier",
                type: "int256",
              },
            ],
            internalType: "struct OracleInput",
            name: "oracleInput",
            type: "tuple",
          },
          {
            internalType: "bytes",
            name: "header",
            type: "bytes",
          },
          {
            internalType: "bytes32[]",
            name: "txHashes",
            type: "bytes32[]",
          },
        ],
        internalType: "struct ProposeArgs",
        name: "_args",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "isEmpty",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct Signature[]",
        name: "_signatures",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "_blobInput",
        type: "bytes",
      },
    ],
    name: "propose",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "prune",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "EthValue",
        name: "_provingCostPerMana",
        type: "uint256",
      },
    ],
    name: "setProvingCostPerMana",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "start",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "end",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "previousArchive",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "endArchive",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "previousBlockHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "endBlockHash",
                type: "bytes32",
              },
              {
                internalType: "Timestamp",
                name: "endTimestamp",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "outHash",
                type: "bytes32",
              },
              {
                internalType: "address",
                name: "proverId",
                type: "address",
              },
            ],
            internalType: "struct PublicInputArgs",
            name: "args",
            type: "tuple",
          },
          {
            internalType: "bytes32[]",
            name: "fees",
            type: "bytes32[]",
          },
          {
            internalType: "bytes",
            name: "blobPublicInputs",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "aggregationObject",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "proof",
            type: "bytes",
          },
        ],
        internalType: "struct SubmitEpochRootProofArgs",
        name: "_args",
        type: "tuple",
      },
    ],
    name: "submitEpochRootProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateL1GasFeeOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IRollupCore__factory {
  static readonly abi = _abi;
  static createInterface(): IRollupCoreInterface {
    return new Interface(_abi) as IRollupCoreInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IRollupCore {
    return new Contract(address, _abi, runner) as unknown as IRollupCore;
  }
}
