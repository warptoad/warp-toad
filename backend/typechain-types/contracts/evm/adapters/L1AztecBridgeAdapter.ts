/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface L1AztecBridgeAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getContentHash"
      | "getLocalRootAndBlock"
      | "getNewRootFromL2"
      | "gigaBridge"
      | "inbox"
      | "initialize"
      | "l2AztecBridgeAdapter"
      | "mostRecentL2Root"
      | "mostRecentL2RootBlockNumber"
      | "outbox"
      | "receiveGigaRoot"
      | "rollup"
      | "rollupVersion"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NewGigaRootSentToAztec" | "ReceivedNewL2Root"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getContentHash",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocalRootAndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNewRootFromL2",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "gigaBridge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "inbox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "l2AztecBridgeAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mostRecentL2Root",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mostRecentL2RootBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "outbox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveGigaRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rollup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rollupVersion",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getContentHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLocalRootAndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewRootFromL2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gigaBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inbox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2AztecBridgeAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mostRecentL2Root",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mostRecentL2RootBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "outbox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveGigaRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rollupVersion",
    data: BytesLike
  ): Result;
}

export namespace NewGigaRootSentToAztecEvent {
  export type InputTuple = [
    newGigaRoot: BytesLike,
    key: BytesLike,
    index: BigNumberish
  ];
  export type OutputTuple = [newGigaRoot: string, key: string, index: bigint];
  export interface OutputObject {
    newGigaRoot: string;
    key: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedNewL2RootEvent {
  export type InputTuple = [newL2Root: BigNumberish, l2Block: BigNumberish];
  export type OutputTuple = [newL2Root: bigint, l2Block: bigint];
  export interface OutputObject {
    newL2Root: bigint;
    l2Block: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface L1AztecBridgeAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): L1AztecBridgeAdapter;
  waitForDeployment(): Promise<this>;

  interface: L1AztecBridgeAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getContentHash: TypedContractMethod<
    [_newL2Root: BytesLike, _bridgedL2BlockNumber: BigNumberish],
    [string],
    "view"
  >;

  getLocalRootAndBlock: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getNewRootFromL2: TypedContractMethod<
    [
      _newL2Root: BytesLike,
      _bridgedL2BlockNumber: BigNumberish,
      _witnessL2BlockNumber: BigNumberish,
      _leafIndex: BigNumberish,
      _path: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  gigaBridge: TypedContractMethod<[], [string], "view">;

  inbox: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _registry: AddressLike,
      _l2AztecBridgeAdapter: BytesLike,
      _gigaRootBridge: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  l2AztecBridgeAdapter: TypedContractMethod<[], [string], "view">;

  mostRecentL2Root: TypedContractMethod<[], [bigint], "view">;

  mostRecentL2RootBlockNumber: TypedContractMethod<[], [bigint], "view">;

  outbox: TypedContractMethod<[], [string], "view">;

  receiveGigaRoot: TypedContractMethod<
    [_newGigaRoot: BigNumberish],
    [void],
    "payable"
  >;

  rollup: TypedContractMethod<[], [string], "view">;

  rollupVersion: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getContentHash"
  ): TypedContractMethod<
    [_newL2Root: BytesLike, _bridgedL2BlockNumber: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLocalRootAndBlock"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getNewRootFromL2"
  ): TypedContractMethod<
    [
      _newL2Root: BytesLike,
      _bridgedL2BlockNumber: BigNumberish,
      _witnessL2BlockNumber: BigNumberish,
      _leafIndex: BigNumberish,
      _path: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gigaBridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "inbox"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _registry: AddressLike,
      _l2AztecBridgeAdapter: BytesLike,
      _gigaRootBridge: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "l2AztecBridgeAdapter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mostRecentL2Root"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mostRecentL2RootBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "outbox"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveGigaRoot"
  ): TypedContractMethod<[_newGigaRoot: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "rollup"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rollupVersion"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "NewGigaRootSentToAztec"
  ): TypedContractEvent<
    NewGigaRootSentToAztecEvent.InputTuple,
    NewGigaRootSentToAztecEvent.OutputTuple,
    NewGigaRootSentToAztecEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedNewL2Root"
  ): TypedContractEvent<
    ReceivedNewL2RootEvent.InputTuple,
    ReceivedNewL2RootEvent.OutputTuple,
    ReceivedNewL2RootEvent.OutputObject
  >;

  filters: {
    "NewGigaRootSentToAztec(bytes32,bytes32,uint256)": TypedContractEvent<
      NewGigaRootSentToAztecEvent.InputTuple,
      NewGigaRootSentToAztecEvent.OutputTuple,
      NewGigaRootSentToAztecEvent.OutputObject
    >;
    NewGigaRootSentToAztec: TypedContractEvent<
      NewGigaRootSentToAztecEvent.InputTuple,
      NewGigaRootSentToAztecEvent.OutputTuple,
      NewGigaRootSentToAztecEvent.OutputObject
    >;

    "ReceivedNewL2Root(uint256,uint256)": TypedContractEvent<
      ReceivedNewL2RootEvent.InputTuple,
      ReceivedNewL2RootEvent.OutputTuple,
      ReceivedNewL2RootEvent.OutputObject
    >;
    ReceivedNewL2Root: TypedContractEvent<
      ReceivedNewL2RootEvent.InputTuple,
      ReceivedNewL2RootEvent.OutputTuple,
      ReceivedNewL2RootEvent.OutputObject
    >;
  };
}
