/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type ExitStruct = { exitableAt: BigNumberish; recipient: AddressLike };

export type ExitStructOutput = [exitableAt: bigint, recipient: string] & {
  exitableAt: bigint;
  recipient: string;
};

export type ValidatorInfoStruct = {
  stake: BigNumberish;
  withdrawer: AddressLike;
  proposer: AddressLike;
  status: BigNumberish;
};

export type ValidatorInfoStructOutput = [
  stake: bigint,
  withdrawer: string,
  proposer: string,
  status: bigint
] & { stake: bigint; withdrawer: string; proposer: string; status: bigint };

export type OperatorInfoStruct = {
  proposer: AddressLike;
  attester: AddressLike;
};

export type OperatorInfoStructOutput = [proposer: string, attester: string] & {
  proposer: string;
  attester: string;
};

export interface IStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "finaliseWithdraw"
      | "getActiveAttesterCount"
      | "getAttesterAtIndex"
      | "getExit"
      | "getExitDelay"
      | "getInfo"
      | "getMinimumStake"
      | "getOperatorAtIndex"
      | "getProposerAtIndex"
      | "getProposerForAttester"
      | "getSlasher"
      | "getStakingAsset"
      | "initiateWithdraw"
      | "slash"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "Slashed"
      | "WithdrawFinalised"
      | "WithdrawInitiated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finaliseWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAttesterCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttesterAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExitDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposerAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposerForAttester",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlasher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdraw",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slash",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finaliseWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAttesterCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttesterAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getExit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExitDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposerAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposerForAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSlasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakingAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slash", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    attester: AddressLike,
    proposer: AddressLike,
    withdrawer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    attester: string,
    proposer: string,
    withdrawer: string,
    amount: bigint
  ];
  export interface OutputObject {
    attester: string;
    proposer: string;
    withdrawer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlashedEvent {
  export type InputTuple = [attester: AddressLike, amount: BigNumberish];
  export type OutputTuple = [attester: string, amount: bigint];
  export interface OutputObject {
    attester: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawFinalisedEvent {
  export type InputTuple = [
    attester: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    attester: string,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    attester: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawInitiatedEvent {
  export type InputTuple = [
    attester: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    attester: string,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    attester: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IStaking extends BaseContract {
  connect(runner?: ContractRunner | null): IStaking;
  waitForDeployment(): Promise<this>;

  interface: IStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [
      _attester: AddressLike,
      _proposer: AddressLike,
      _withdrawer: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  finaliseWithdraw: TypedContractMethod<
    [_attester: AddressLike],
    [void],
    "nonpayable"
  >;

  getActiveAttesterCount: TypedContractMethod<[], [bigint], "view">;

  getAttesterAtIndex: TypedContractMethod<
    [_index: BigNumberish],
    [string],
    "view"
  >;

  getExit: TypedContractMethod<
    [_attester: AddressLike],
    [ExitStructOutput],
    "view"
  >;

  getExitDelay: TypedContractMethod<[], [bigint], "view">;

  getInfo: TypedContractMethod<
    [_attester: AddressLike],
    [ValidatorInfoStructOutput],
    "view"
  >;

  getMinimumStake: TypedContractMethod<[], [bigint], "view">;

  getOperatorAtIndex: TypedContractMethod<
    [_index: BigNumberish],
    [OperatorInfoStructOutput],
    "view"
  >;

  getProposerAtIndex: TypedContractMethod<
    [_index: BigNumberish],
    [string],
    "view"
  >;

  getProposerForAttester: TypedContractMethod<
    [_attester: AddressLike],
    [string],
    "view"
  >;

  getSlasher: TypedContractMethod<[], [string], "view">;

  getStakingAsset: TypedContractMethod<[], [string], "view">;

  initiateWithdraw: TypedContractMethod<
    [_attester: AddressLike, _recipient: AddressLike],
    [boolean],
    "nonpayable"
  >;

  slash: TypedContractMethod<
    [_attester: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      _attester: AddressLike,
      _proposer: AddressLike,
      _withdrawer: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finaliseWithdraw"
  ): TypedContractMethod<[_attester: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveAttesterCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAttesterAtIndex"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getExit"
  ): TypedContractMethod<[_attester: AddressLike], [ExitStructOutput], "view">;
  getFunction(
    nameOrSignature: "getExitDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInfo"
  ): TypedContractMethod<
    [_attester: AddressLike],
    [ValidatorInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMinimumStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOperatorAtIndex"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [OperatorInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposerAtIndex"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getProposerForAttester"
  ): TypedContractMethod<[_attester: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSlasher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStakingAsset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initiateWithdraw"
  ): TypedContractMethod<
    [_attester: AddressLike, _recipient: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slash"
  ): TypedContractMethod<
    [_attester: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Slashed"
  ): TypedContractEvent<
    SlashedEvent.InputTuple,
    SlashedEvent.OutputTuple,
    SlashedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawFinalised"
  ): TypedContractEvent<
    WithdrawFinalisedEvent.InputTuple,
    WithdrawFinalisedEvent.OutputTuple,
    WithdrawFinalisedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawInitiated"
  ): TypedContractEvent<
    WithdrawInitiatedEvent.InputTuple,
    WithdrawInitiatedEvent.OutputTuple,
    WithdrawInitiatedEvent.OutputObject
  >;

  filters: {
    "Deposit(address,address,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Slashed(address,uint256)": TypedContractEvent<
      SlashedEvent.InputTuple,
      SlashedEvent.OutputTuple,
      SlashedEvent.OutputObject
    >;
    Slashed: TypedContractEvent<
      SlashedEvent.InputTuple,
      SlashedEvent.OutputTuple,
      SlashedEvent.OutputObject
    >;

    "WithdrawFinalised(address,address,uint256)": TypedContractEvent<
      WithdrawFinalisedEvent.InputTuple,
      WithdrawFinalisedEvent.OutputTuple,
      WithdrawFinalisedEvent.OutputObject
    >;
    WithdrawFinalised: TypedContractEvent<
      WithdrawFinalisedEvent.InputTuple,
      WithdrawFinalisedEvent.OutputTuple,
      WithdrawFinalisedEvent.OutputObject
    >;

    "WithdrawInitiated(address,address,uint256)": TypedContractEvent<
      WithdrawInitiatedEvent.InputTuple,
      WithdrawInitiatedEvent.OutputTuple,
      WithdrawInitiatedEvent.OutputObject
    >;
    WithdrawInitiated: TypedContractEvent<
      WithdrawInitiatedEvent.InputTuple,
      WithdrawInitiatedEvent.OutputTuple,
      WithdrawInitiatedEvent.OutputObject
    >;
  };
}
