/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type CheatDepositArgsStruct = {
  attester: AddressLike;
  proposer: AddressLike;
  withdrawer: AddressLike;
  amount: BigNumberish;
};

export type CheatDepositArgsStructOutput = [
  attester: string,
  proposer: string,
  withdrawer: string,
  amount: bigint
] & { attester: string; proposer: string; withdrawer: string; amount: bigint };

export interface ITestRollupInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cheat__InitialiseValidatorSet"
      | "setEpochVerifier"
      | "setProtocolContractTreeRoot"
      | "setVkTreeRoot"
      | "updateManaTarget"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ManaTargetUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "cheat__InitialiseValidatorSet",
    values: [CheatDepositArgsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setEpochVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolContractTreeRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVkTreeRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateManaTarget",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cheat__InitialiseValidatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEpochVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolContractTreeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVkTreeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateManaTarget",
    data: BytesLike
  ): Result;
}

export namespace ManaTargetUpdatedEvent {
  export type InputTuple = [manaTarget: BigNumberish];
  export type OutputTuple = [manaTarget: bigint];
  export interface OutputObject {
    manaTarget: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITestRollup extends BaseContract {
  connect(runner?: ContractRunner | null): ITestRollup;
  waitForDeployment(): Promise<this>;

  interface: ITestRollupInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cheat__InitialiseValidatorSet: TypedContractMethod<
    [_args: CheatDepositArgsStruct[]],
    [void],
    "nonpayable"
  >;

  setEpochVerifier: TypedContractMethod<
    [_verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtocolContractTreeRoot: TypedContractMethod<
    [_protocolContractTreeRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  setVkTreeRoot: TypedContractMethod<
    [_vkTreeRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  updateManaTarget: TypedContractMethod<
    [_manaTarget: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cheat__InitialiseValidatorSet"
  ): TypedContractMethod<
    [_args: CheatDepositArgsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEpochVerifier"
  ): TypedContractMethod<[_verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolContractTreeRoot"
  ): TypedContractMethod<
    [_protocolContractTreeRoot: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVkTreeRoot"
  ): TypedContractMethod<[_vkTreeRoot: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateManaTarget"
  ): TypedContractMethod<[_manaTarget: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ManaTargetUpdated"
  ): TypedContractEvent<
    ManaTargetUpdatedEvent.InputTuple,
    ManaTargetUpdatedEvent.OutputTuple,
    ManaTargetUpdatedEvent.OutputObject
  >;

  filters: {
    "ManaTargetUpdated(uint256)": TypedContractEvent<
      ManaTargetUpdatedEvent.InputTuple,
      ManaTargetUpdatedEvent.OutputTuple,
      ManaTargetUpdatedEvent.OutputObject
    >;
    ManaTargetUpdated: TypedContractEvent<
      ManaTargetUpdatedEvent.InputTuple,
      ManaTargetUpdatedEvent.OutputTuple,
      ManaTargetUpdatedEvent.OutputObject
    >;
  };
}
