/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type OracleInputStruct = { feeAssetPriceModifier: BigNumberish };

export type OracleInputStructOutput = [feeAssetPriceModifier: bigint] & {
  feeAssetPriceModifier: bigint;
};

export type ProposeArgsStruct = {
  archive: BytesLike;
  blockHash: BytesLike;
  oracleInput: OracleInputStruct;
  header: BytesLike;
  txHashes: BytesLike[];
};

export type ProposeArgsStructOutput = [
  archive: string,
  blockHash: string,
  oracleInput: OracleInputStructOutput,
  header: string,
  txHashes: string[]
] & {
  archive: string;
  blockHash: string;
  oracleInput: OracleInputStructOutput;
  header: string;
  txHashes: string[];
};

export type SignatureStruct = {
  isEmpty: boolean;
  v: BigNumberish;
  r: BytesLike;
  s: BytesLike;
};

export type SignatureStructOutput = [
  isEmpty: boolean,
  v: bigint,
  r: string,
  s: string
] & { isEmpty: boolean; v: bigint; r: string; s: string };

export type PublicInputArgsStruct = {
  previousArchive: BytesLike;
  endArchive: BytesLike;
  previousBlockHash: BytesLike;
  endBlockHash: BytesLike;
  endTimestamp: BigNumberish;
  outHash: BytesLike;
  proverId: AddressLike;
};

export type PublicInputArgsStructOutput = [
  previousArchive: string,
  endArchive: string,
  previousBlockHash: string,
  endBlockHash: string,
  endTimestamp: bigint,
  outHash: string,
  proverId: string
] & {
  previousArchive: string;
  endArchive: string;
  previousBlockHash: string;
  endBlockHash: string;
  endTimestamp: bigint;
  outHash: string;
  proverId: string;
};

export type SubmitEpochRootProofArgsStruct = {
  start: BigNumberish;
  end: BigNumberish;
  args: PublicInputArgsStruct;
  fees: BytesLike[];
  blobPublicInputs: BytesLike;
  aggregationObject: BytesLike;
  proof: BytesLike;
};

export type SubmitEpochRootProofArgsStructOutput = [
  start: bigint,
  end: bigint,
  args: PublicInputArgsStructOutput,
  fees: string[],
  blobPublicInputs: string,
  aggregationObject: string,
  proof: string
] & {
  start: bigint;
  end: bigint;
  args: PublicInputArgsStructOutput;
  fees: string[];
  blobPublicInputs: string;
  aggregationObject: string;
  proof: string;
};

export interface IRollupCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "L1_BLOCK_AT_GENESIS"
      | "claimProverRewards"
      | "claimSequencerRewards"
      | "propose"
      | "prune"
      | "setProvingCostPerMana"
      | "submitEpochRootProof"
      | "updateL1GasFeeOracle"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "L2BlockProposed"
      | "L2ProofVerified"
      | "PrunedPending"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "L1_BLOCK_AT_GENESIS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimProverRewards",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSequencerRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [ProposeArgsStruct, SignatureStruct[], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "prune", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setProvingCostPerMana",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEpochRootProof",
    values: [SubmitEpochRootProofArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateL1GasFeeOracle",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "L1_BLOCK_AT_GENESIS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimProverRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSequencerRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prune", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProvingCostPerMana",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEpochRootProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateL1GasFeeOracle",
    data: BytesLike
  ): Result;
}

export namespace L2BlockProposedEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    archive: BytesLike,
    versionedBlobHashes: BytesLike[]
  ];
  export type OutputTuple = [
    blockNumber: bigint,
    archive: string,
    versionedBlobHashes: string[]
  ];
  export interface OutputObject {
    blockNumber: bigint;
    archive: string;
    versionedBlobHashes: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace L2ProofVerifiedEvent {
  export type InputTuple = [blockNumber: BigNumberish, proverId: AddressLike];
  export type OutputTuple = [blockNumber: bigint, proverId: string];
  export interface OutputObject {
    blockNumber: bigint;
    proverId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrunedPendingEvent {
  export type InputTuple = [
    provenBlockNumber: BigNumberish,
    pendingBlockNumber: BigNumberish
  ];
  export type OutputTuple = [
    provenBlockNumber: bigint,
    pendingBlockNumber: bigint
  ];
  export interface OutputObject {
    provenBlockNumber: bigint;
    pendingBlockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRollupCore extends BaseContract {
  connect(runner?: ContractRunner | null): IRollupCore;
  waitForDeployment(): Promise<this>;

  interface: IRollupCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  L1_BLOCK_AT_GENESIS: TypedContractMethod<[], [bigint], "view">;

  claimProverRewards: TypedContractMethod<
    [_recipient: AddressLike, _epochs: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  claimSequencerRewards: TypedContractMethod<
    [_recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;

  propose: TypedContractMethod<
    [
      _args: ProposeArgsStruct,
      _signatures: SignatureStruct[],
      _blobInput: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  prune: TypedContractMethod<[], [void], "nonpayable">;

  setProvingCostPerMana: TypedContractMethod<
    [_provingCostPerMana: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitEpochRootProof: TypedContractMethod<
    [_args: SubmitEpochRootProofArgsStruct],
    [void],
    "nonpayable"
  >;

  updateL1GasFeeOracle: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "L1_BLOCK_AT_GENESIS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimProverRewards"
  ): TypedContractMethod<
    [_recipient: AddressLike, _epochs: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimSequencerRewards"
  ): TypedContractMethod<[_recipient: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [
      _args: ProposeArgsStruct,
      _signatures: SignatureStruct[],
      _blobInput: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prune"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProvingCostPerMana"
  ): TypedContractMethod<
    [_provingCostPerMana: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitEpochRootProof"
  ): TypedContractMethod<
    [_args: SubmitEpochRootProofArgsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateL1GasFeeOracle"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "L2BlockProposed"
  ): TypedContractEvent<
    L2BlockProposedEvent.InputTuple,
    L2BlockProposedEvent.OutputTuple,
    L2BlockProposedEvent.OutputObject
  >;
  getEvent(
    key: "L2ProofVerified"
  ): TypedContractEvent<
    L2ProofVerifiedEvent.InputTuple,
    L2ProofVerifiedEvent.OutputTuple,
    L2ProofVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "PrunedPending"
  ): TypedContractEvent<
    PrunedPendingEvent.InputTuple,
    PrunedPendingEvent.OutputTuple,
    PrunedPendingEvent.OutputObject
  >;

  filters: {
    "L2BlockProposed(uint256,bytes32,bytes32[])": TypedContractEvent<
      L2BlockProposedEvent.InputTuple,
      L2BlockProposedEvent.OutputTuple,
      L2BlockProposedEvent.OutputObject
    >;
    L2BlockProposed: TypedContractEvent<
      L2BlockProposedEvent.InputTuple,
      L2BlockProposedEvent.OutputTuple,
      L2BlockProposedEvent.OutputObject
    >;

    "L2ProofVerified(uint256,address)": TypedContractEvent<
      L2ProofVerifiedEvent.InputTuple,
      L2ProofVerifiedEvent.OutputTuple,
      L2ProofVerifiedEvent.OutputObject
    >;
    L2ProofVerified: TypedContractEvent<
      L2ProofVerifiedEvent.InputTuple,
      L2ProofVerifiedEvent.OutputTuple,
      L2ProofVerifiedEvent.OutputObject
    >;

    "PrunedPending(uint256,uint256)": TypedContractEvent<
      PrunedPendingEvent.InputTuple,
      PrunedPendingEvent.OutputTuple,
      PrunedPendingEvent.OutputObject
    >;
    PrunedPending: TypedContractEvent<
      PrunedPendingEvent.InputTuple,
      PrunedPendingEvent.OutputTuple,
      PrunedPendingEvent.OutputObject
    >;
  };
}
