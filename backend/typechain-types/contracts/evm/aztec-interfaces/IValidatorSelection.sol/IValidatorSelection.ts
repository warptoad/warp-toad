/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IValidatorSelectionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAttesters"
      | "getCommitteeAt"
      | "getCurrentEpoch"
      | "getCurrentEpochCommittee"
      | "getCurrentProposer"
      | "getCurrentSampleSeed"
      | "getCurrentSlot"
      | "getEpochAt"
      | "getEpochAtSlot"
      | "getEpochCommittee"
      | "getEpochDuration"
      | "getGenesisTime"
      | "getProposerAt"
      | "getSampleSeedAt"
      | "getSlotAt"
      | "getSlotDuration"
      | "getTargetCommitteeSize"
      | "getTimestampForSlot"
      | "setupEpoch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAttesters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitteeAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpochCommittee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentProposer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSampleSeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSlot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochAtSlot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochCommittee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGenesisTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposerAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSampleSeedAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlotAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlotDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetCommitteeSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampForSlot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setupEpoch",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAttesters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitteeAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpochCommittee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSampleSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEpochAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEpochAtSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochCommittee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGenesisTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSampleSeedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSlotAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSlotDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetCommitteeSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampForSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupEpoch", data: BytesLike): Result;
}

export interface IValidatorSelection extends BaseContract {
  connect(runner?: ContractRunner | null): IValidatorSelection;
  waitForDeployment(): Promise<this>;

  interface: IValidatorSelectionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAttesters: TypedContractMethod<[], [string[]], "view">;

  getCommitteeAt: TypedContractMethod<
    [_ts: BigNumberish],
    [string[]],
    "nonpayable"
  >;

  getCurrentEpoch: TypedContractMethod<[], [bigint], "view">;

  getCurrentEpochCommittee: TypedContractMethod<[], [string[]], "nonpayable">;

  getCurrentProposer: TypedContractMethod<[], [string], "nonpayable">;

  getCurrentSampleSeed: TypedContractMethod<[], [bigint], "view">;

  getCurrentSlot: TypedContractMethod<[], [bigint], "view">;

  getEpochAt: TypedContractMethod<[_ts: BigNumberish], [bigint], "view">;

  getEpochAtSlot: TypedContractMethod<
    [_slotNumber: BigNumberish],
    [bigint],
    "view"
  >;

  getEpochCommittee: TypedContractMethod<
    [_epoch: BigNumberish],
    [string[]],
    "nonpayable"
  >;

  getEpochDuration: TypedContractMethod<[], [bigint], "view">;

  getGenesisTime: TypedContractMethod<[], [bigint], "view">;

  getProposerAt: TypedContractMethod<
    [_ts: BigNumberish],
    [string],
    "nonpayable"
  >;

  getSampleSeedAt: TypedContractMethod<[_ts: BigNumberish], [bigint], "view">;

  getSlotAt: TypedContractMethod<[_ts: BigNumberish], [bigint], "view">;

  getSlotDuration: TypedContractMethod<[], [bigint], "view">;

  getTargetCommitteeSize: TypedContractMethod<[], [bigint], "view">;

  getTimestampForSlot: TypedContractMethod<
    [_slotNumber: BigNumberish],
    [bigint],
    "view"
  >;

  setupEpoch: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAttesters"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCommitteeAt"
  ): TypedContractMethod<[_ts: BigNumberish], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentEpochCommittee"
  ): TypedContractMethod<[], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentProposer"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentSampleSeed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentSlot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEpochAt"
  ): TypedContractMethod<[_ts: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEpochAtSlot"
  ): TypedContractMethod<[_slotNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEpochCommittee"
  ): TypedContractMethod<[_epoch: BigNumberish], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "getEpochDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGenesisTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProposerAt"
  ): TypedContractMethod<[_ts: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getSampleSeedAt"
  ): TypedContractMethod<[_ts: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSlotAt"
  ): TypedContractMethod<[_ts: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSlotDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTargetCommitteeSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTimestampForSlot"
  ): TypedContractMethod<[_slotNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setupEpoch"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
