"use strict";
/* Autogenerated file, do not edit! */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WarpToadCoreContract = exports.WarpToadCoreContractArtifact = void 0;
/* eslint-disable */
const aztec_js_1 = require("@aztec/aztec.js");
const WarpToadCore_WarpToadCore_json_1 = __importDefault(require("../../target/WarpToadCore-WarpToadCore.json"));
exports.WarpToadCoreContractArtifact = (0, aztec_js_1.loadContractArtifact)(WarpToadCore_WarpToadCore_json_1.default);
/**
 * Type-safe interface for contract WarpToadCore;
 */
class WarpToadCoreContract extends aztec_js_1.ContractBase {
    constructor(instance, wallet) {
        super(instance, exports.WarpToadCoreContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return aztec_js_1.Contract.at(address, WarpToadCoreContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, native_token, _name, _symbol, _decimals) {
        return new aztec_js_1.DeployMethod(aztec_js_1.PublicKeys.default(), wallet, exports.WarpToadCoreContractArtifact, WarpToadCoreContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys, wallet, native_token, _name, _symbol, _decimals) {
        return new aztec_js_1.DeployMethod(publicKeys, wallet, exports.WarpToadCoreContractArtifact, WarpToadCoreContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new aztec_js_1.DeployMethod(opts.publicKeys ?? aztec_js_1.PublicKeys.default(), opts.wallet, exports.WarpToadCoreContractArtifact, WarpToadCoreContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return exports.WarpToadCoreContractArtifact;
    }
    /**
     * Returns this contract's artifact with public bytecode.
     */
    static get artifactForPublic() {
        return (0, aztec_js_1.loadContractArtifactForPublic)(WarpToadCore_WarpToadCore_json_1.default);
    }
    static get storage() {
        return {
            giga_root: {
                slot: new aztec_js_1.Fr(1n),
            },
            native_token: {
                slot: new aztec_js_1.Fr(2n),
            },
            balances: {
                slot: new aztec_js_1.Fr(4n),
            },
            commitments: {
                slot: new aztec_js_1.Fr(5n),
            },
            symbol: {
                slot: new aztec_js_1.Fr(6n),
            },
            name: {
                slot: new aztec_js_1.Fr(8n),
            },
            decimals: {
                slot: new aztec_js_1.Fr(10n),
            },
            deployer: {
                slot: new aztec_js_1.Fr(12n),
            },
            giga_root_provider: {
                slot: new aztec_js_1.Fr(14n),
            },
            l1_bridge_adapter: {
                slot: new aztec_js_1.Fr(16n),
            }
        };
    }
    static get notes() {
        return {
            ValueNote: {
                id: new aztec_js_1.NoteSelector(0),
            },
            UintNote: {
                id: new aztec_js_1.NoteSelector(1),
            },
            WarpToadNote: {
                id: new aztec_js_1.NoteSelector(2),
            }
        };
    }
    static get events() {
        return {
            Transfer: {
                abiType: {
                    "kind": "struct",
                    "fields": [
                        {
                            "name": "from",
                            "type": {
                                "kind": "struct",
                                "fields": [
                                    {
                                        "name": "inner",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ],
                                "path": "protocol_types::address::aztec_address::AztecAddress"
                            }
                        },
                        {
                            "name": "to",
                            "type": {
                                "kind": "struct",
                                "fields": [
                                    {
                                        "name": "inner",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ],
                                "path": "protocol_types::address::aztec_address::AztecAddress"
                            }
                        },
                        {
                            "name": "amount",
                            "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                            }
                        }
                    ],
                    "path": "WarpToadCore::Transfer"
                },
                eventSelector: aztec_js_1.EventSelector.fromString("0x3870eeb5"),
                fieldNames: ["from", "to", "amount"],
            }
        };
    }
}
exports.WarpToadCoreContract = WarpToadCoreContract;
