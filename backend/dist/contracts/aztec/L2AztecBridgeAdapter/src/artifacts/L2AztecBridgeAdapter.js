/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, Fr, loadContractArtifact, loadContractArtifactForPublic, NoteSelector, PublicKeys, } from '@aztec/aztec.js';
import L2AztecBridgeAdapterContractArtifactJson from '../../target/L2AztecBridgeAdapter-L2AztecBridgeAdapter.json';
export const L2AztecBridgeAdapterContractArtifact = loadContractArtifact(L2AztecBridgeAdapterContractArtifactJson);
/**
 * Type-safe interface for contract L2AztecBridgeAdapter;
 */
export class L2AztecBridgeAdapterContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, L2AztecBridgeAdapterContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, L2AztecBridgeAdapterContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, l1BridgeAdapter) {
        return new DeployMethod(PublicKeys.default(), wallet, L2AztecBridgeAdapterContractArtifact, L2AztecBridgeAdapterContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys, wallet, l1BridgeAdapter) {
        return new DeployMethod(publicKeys, wallet, L2AztecBridgeAdapterContractArtifact, L2AztecBridgeAdapterContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeys ?? PublicKeys.default(), opts.wallet, L2AztecBridgeAdapterContractArtifact, L2AztecBridgeAdapterContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return L2AztecBridgeAdapterContractArtifact;
    }
    /**
     * Returns this contract's artifact with public bytecode.
     */
    static get artifactForPublic() {
        return loadContractArtifactForPublic(L2AztecBridgeAdapterContractArtifactJson);
    }
    static get storage() {
        return {
            l1BridgeAdapter: {
                slot: new Fr(1n),
            },
            counter: {
                slot: new Fr(3n),
            }
        };
    }
    static get notes() {
        return {
            ValueNote: {
                id: new NoteSelector(0),
            },
            UintNote: {
                id: new NoteSelector(1),
            },
            WarpToadNote: {
                id: new NoteSelector(2),
            }
        };
    }
}
