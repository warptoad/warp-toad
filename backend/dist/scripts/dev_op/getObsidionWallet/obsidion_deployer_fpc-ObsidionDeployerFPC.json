{
    "transpiled": true,
    "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
    "name": "ObsidionDeployerFPC",
    "functions": [
        {
            "name": "sync_notes",
            "is_unconstrained": true,
            "custom_attributes": [
                "aztec::macros::functions::utility"
            ],
            "abi": {
                "parameters": [],
                "return_type": null,
                "error_types": {
                    "576755928210959028": {
                        "error_kind": "string",
                        "string": "0 has a square root; you cannot claim it is not square"
                    },
                    "2709101749560550278": {
                        "error_kind": "string",
                        "string": "Cannot serialize point at infinity as bytes."
                    },
                    "2896122431943215824": {
                        "error_kind": "fmtstring",
                        "length": 144,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "2920182694213909827": {
                        "error_kind": "string",
                        "string": "attempt to subtract with overflow"
                    },
                    "3305101268118424981": {
                        "error_kind": "string",
                        "string": "Attempted to delete past the length of a CapsuleArray"
                    },
                    "3367683922240523006": {
                        "error_kind": "fmtstring",
                        "length": 58,
                        "item_types": [
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "5019202896831570965": {
                        "error_kind": "string",
                        "string": "attempt to add with overflow"
                    },
                    "5727012404371710682": {
                        "error_kind": "string",
                        "string": "push out of bounds"
                    },
                    "5870202753060865374": {
                        "error_kind": "fmtstring",
                        "length": 61,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "6336853191198150230": {
                        "error_kind": "fmtstring",
                        "length": 77,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "6485997221020871071": {
                        "error_kind": "string",
                        "string": "call to assert_max_bit_size"
                    },
                    "6753155520859132764": {
                        "error_kind": "string",
                        "string": "Failed to deliver note"
                    },
                    "7233212735005103307": {
                        "error_kind": "string",
                        "string": "attempt to multiply with overflow"
                    },
                    "8270195893599566439": {
                        "error_kind": "string",
                        "string": "Invalid public keys hint for address"
                    },
                    "8830323656616886390": {
                        "error_kind": "string",
                        "string": "Got a public log emitted by a different contract"
                    },
                    "12099279057757775880": {
                        "error_kind": "string",
                        "string": "DST_LEN too large for offset"
                    },
                    "12822839658937144934": {
                        "error_kind": "fmtstring",
                        "length": 75,
                        "item_types": []
                    },
                    "13649294680379557736": {
                        "error_kind": "string",
                        "string": "extend_from_bounded_vec out of bounds"
                    },
                    "14225679739041873922": {
                        "error_kind": "string",
                        "string": "Index out of bounds"
                    },
                    "14514982005979867414": {
                        "error_kind": "string",
                        "string": "attempt to bit-shift with overflow"
                    },
                    "14657895983200220173": {
                        "error_kind": "string",
                        "string": "Attempted to read past the length of a CapsuleArray"
                    },
                    "15366650908120444287": {
                        "error_kind": "fmtstring",
                        "length": 48,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "16218014537381711836": {
                        "error_kind": "string",
                        "string": "Value does not fit in field"
                    },
                    "16446004518090376065": {
                        "error_kind": "string",
                        "string": "Input length must be a multiple of 32"
                    },
                    "16954218183513903507": {
                        "error_kind": "string",
                        "string": "Attempted to read past end of BoundedVec"
                    },
                    "17843811134343075018": {
                        "error_kind": "string",
                        "string": "Stack too deep"
                    },
                    "17879506016437779469": {
                        "error_kind": "fmtstring",
                        "length": 128,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "18194595712952743247": {
                        "error_kind": "fmtstring",
                        "length": 98,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    }
                }
            },
            "bytecode": "",
            "debug_symbols": "",
            "brillig_names": [
                "sync_notes"
            ]
        },
        {
            "name": "lookup_validity",
            "is_unconstrained": true,
            "custom_attributes": [
                "utility"
            ],
            "abi": {
                "parameters": [
                    {
                        "name": "consumer",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                            "fields": [
                                {
                                    "name": "inner",
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "inner_hash",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "return_type": {
                    "abi_type": {
                        "kind": "boolean"
                    },
                    "visibility": "public"
                },
                "error_types": {
                    "576755928210959028": {
                        "error_kind": "string",
                        "string": "0 has a square root; you cannot claim it is not square"
                    },
                    "2709101749560550278": {
                        "error_kind": "string",
                        "string": "Cannot serialize point at infinity as bytes."
                    },
                    "2896122431943215824": {
                        "error_kind": "fmtstring",
                        "length": 144,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "2920182694213909827": {
                        "error_kind": "string",
                        "string": "attempt to subtract with overflow"
                    },
                    "3305101268118424981": {
                        "error_kind": "string",
                        "string": "Attempted to delete past the length of a CapsuleArray"
                    },
                    "3367683922240523006": {
                        "error_kind": "fmtstring",
                        "length": 58,
                        "item_types": [
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "5019202896831570965": {
                        "error_kind": "string",
                        "string": "attempt to add with overflow"
                    },
                    "5672954975036048158": {
                        "error_kind": "string",
                        "string": "Collapse hint vec length mismatch"
                    },
                    "5727012404371710682": {
                        "error_kind": "string",
                        "string": "push out of bounds"
                    },
                    "5870202753060865374": {
                        "error_kind": "fmtstring",
                        "length": 61,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "6336853191198150230": {
                        "error_kind": "fmtstring",
                        "length": 77,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "6485997221020871071": {
                        "error_kind": "string",
                        "string": "call to assert_max_bit_size"
                    },
                    "6753155520859132764": {
                        "error_kind": "string",
                        "string": "Failed to deliver note"
                    },
                    "7233212735005103307": {
                        "error_kind": "string",
                        "string": "attempt to multiply with overflow"
                    },
                    "7506220854563469239": {
                        "error_kind": "string",
                        "string": "Dirty collapsed vec storage"
                    },
                    "8270195893599566439": {
                        "error_kind": "string",
                        "string": "Invalid public keys hint for address"
                    },
                    "8830323656616886390": {
                        "error_kind": "string",
                        "string": "Got a public log emitted by a different contract"
                    },
                    "10583567252049806039": {
                        "error_kind": "string",
                        "string": "Wrong collapsed vec order"
                    },
                    "11499495063250795588": {
                        "error_kind": "string",
                        "string": "Wrong collapsed vec content"
                    },
                    "11553125913047385813": {
                        "error_kind": "string",
                        "string": "Wrong collapsed vec length"
                    },
                    "12099279057757775880": {
                        "error_kind": "string",
                        "string": "DST_LEN too large for offset"
                    },
                    "12822839658937144934": {
                        "error_kind": "fmtstring",
                        "length": 75,
                        "item_types": []
                    },
                    "13649294680379557736": {
                        "error_kind": "string",
                        "string": "extend_from_bounded_vec out of bounds"
                    },
                    "14225679739041873922": {
                        "error_kind": "string",
                        "string": "Index out of bounds"
                    },
                    "14514982005979867414": {
                        "error_kind": "string",
                        "string": "attempt to bit-shift with overflow"
                    },
                    "14657895983200220173": {
                        "error_kind": "string",
                        "string": "Attempted to read past the length of a CapsuleArray"
                    },
                    "15366650908120444287": {
                        "error_kind": "fmtstring",
                        "length": 48,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "15431201120282223247": {
                        "error_kind": "string",
                        "string": "Out of bounds index hint"
                    },
                    "16218014537381711836": {
                        "error_kind": "string",
                        "string": "Value does not fit in field"
                    },
                    "16446004518090376065": {
                        "error_kind": "string",
                        "string": "Input length must be a multiple of 32"
                    },
                    "16954218183513903507": {
                        "error_kind": "string",
                        "string": "Attempted to read past end of BoundedVec"
                    },
                    "17843811134343075018": {
                        "error_kind": "string",
                        "string": "Stack too deep"
                    },
                    "17879506016437779469": {
                        "error_kind": "fmtstring",
                        "length": 128,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "18194595712952743247": {
                        "error_kind": "fmtstring",
                        "length": 98,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    }
                }
            },
            "bytecode": "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",
            "debug_symbols": "",
            "brillig_names": [
                "lookup_validity"
            ]
        },
        {
            "name": "constructor",
            "is_unconstrained": false,
            "custom_attributes": [
                "private",
                "initializer"
            ],
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "content_commitment",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                                                    "fields": [
                                                        {
                                                            "name": "num_txs",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "blobs_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "in_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "out_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "slot_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 64
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "gas_fees",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "total_fees",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "total_mana_used",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "tx_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "gas_settings",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                                                    "fields": [
                                                        {
                                                            "name": "gas_limits",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "teardown_gas_limits",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "max_fees_per_gas",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "max_priority_fees_per_gas",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "start_side_effect_counter",
                                    "type": {
                                        "kind": "integer",
                                        "sign": "unsigned",
                                        "width": 32
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "signing_pub_key_x",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "signing_pub_key_y",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "returns_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "min_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "is_fee_payer",
                                "type": {
                                    "kind": "boolean"
                                }
                            },
                            {
                                "name": "max_block_number",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                                    "fields": [
                                        {
                                            "name": "_opt",
                                            "type": {
                                                "kind": "struct",
                                                "path": "std::option::Option",
                                                "fields": [
                                                    {
                                                        "name": "_is_some",
                                                        "type": {
                                                            "kind": "boolean"
                                                        }
                                                    },
                                                    {
                                                        "name": "_value",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "note_hash_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifier_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "key_validation_requests_and_generators",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                                        "fields": [
                                            {
                                                "name": "request",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                                    "fields": [
                                                        {
                                                            "name": "pk_m",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                                                "fields": [
                                                                    {
                                                                        "name": "x",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "y",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "is_infinite",
                                                                        "type": {
                                                                            "kind": "boolean"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "sk_app",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "sk_app_generator",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "note_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 5,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                                        "fields": [
                                            {
                                                "name": "call_context",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "function_selector",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "returns_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "end_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                                        "fields": [
                                            {
                                                "name": "inner",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        },
                                                        {
                                                            "name": "calldata_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_teardown_call_request",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "calldata_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                        "fields": [
                                            {
                                                "name": "recipient",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "content",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_logs",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                                        "fields": [
                                            {
                                                "name": "log",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::log::Log",
                                                    "fields": [
                                                        {
                                                            "name": "fields",
                                                            "type": {
                                                                "kind": "array",
                                                                "length": 18,
                                                                "type": {
                                                                    "kind": "field"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "note_hash_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "contract_class_logs_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 1,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "length",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "start_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "content_commitment",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                                                "fields": [
                                                    {
                                                        "name": "num_txs",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "blobs_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "in_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "out_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "slot_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 64
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "gas_fees",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "total_fees",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "total_mana_used",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "tx_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                                    "fields": [
                                        {
                                            "name": "chain_id",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "version",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "gas_settings",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                                                "fields": [
                                                    {
                                                        "name": "gas_limits",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "teardown_gas_limits",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "max_fees_per_gas",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "max_priority_fees_per_gas",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "visibility": "databus"
                },
                "error_types": {
                    "576755928210959028": {
                        "error_kind": "string",
                        "string": "0 has a square root; you cannot claim it is not square"
                    },
                    "2233873454491509486": {
                        "error_kind": "string",
                        "string": "Initializer address is not the contract deployer"
                    },
                    "2709101749560550278": {
                        "error_kind": "string",
                        "string": "Cannot serialize point at infinity as bytes."
                    },
                    "2896122431943215824": {
                        "error_kind": "fmtstring",
                        "length": 144,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "2920182694213909827": {
                        "error_kind": "string",
                        "string": "attempt to subtract with overflow"
                    },
                    "3305101268118424981": {
                        "error_kind": "string",
                        "string": "Attempted to delete past the length of a CapsuleArray"
                    },
                    "3367683922240523006": {
                        "error_kind": "fmtstring",
                        "length": 58,
                        "item_types": [
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "5019202896831570965": {
                        "error_kind": "string",
                        "string": "attempt to add with overflow"
                    },
                    "5727012404371710682": {
                        "error_kind": "string",
                        "string": "push out of bounds"
                    },
                    "5870202753060865374": {
                        "error_kind": "fmtstring",
                        "length": 61,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "6336853191198150230": {
                        "error_kind": "fmtstring",
                        "length": 77,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "6485997221020871071": {
                        "error_kind": "string",
                        "string": "call to assert_max_bit_size"
                    },
                    "6753155520859132764": {
                        "error_kind": "string",
                        "string": "Failed to deliver note"
                    },
                    "7233212735005103307": {
                        "error_kind": "string",
                        "string": "attempt to multiply with overflow"
                    },
                    "8270195893599566439": {
                        "error_kind": "string",
                        "string": "Invalid public keys hint for address"
                    },
                    "8830323656616886390": {
                        "error_kind": "string",
                        "string": "Got a public log emitted by a different contract"
                    },
                    "12099279057757775880": {
                        "error_kind": "string",
                        "string": "DST_LEN too large for offset"
                    },
                    "12822839658937144934": {
                        "error_kind": "fmtstring",
                        "length": 75,
                        "item_types": []
                    },
                    "13649294680379557736": {
                        "error_kind": "string",
                        "string": "extend_from_bounded_vec out of bounds"
                    },
                    "14225679739041873922": {
                        "error_kind": "string",
                        "string": "Index out of bounds"
                    },
                    "14514982005979867414": {
                        "error_kind": "string",
                        "string": "attempt to bit-shift with overflow"
                    },
                    "14657895983200220173": {
                        "error_kind": "string",
                        "string": "Attempted to read past the length of a CapsuleArray"
                    },
                    "15366650908120444287": {
                        "error_kind": "fmtstring",
                        "length": 48,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "16218014537381711836": {
                        "error_kind": "string",
                        "string": "Value does not fit in field"
                    },
                    "16446004518090376065": {
                        "error_kind": "string",
                        "string": "Input length must be a multiple of 32"
                    },
                    "16954218183513903507": {
                        "error_kind": "string",
                        "string": "Attempted to read past end of BoundedVec"
                    },
                    "17618083556256589634": {
                        "error_kind": "string",
                        "string": "Initialization hash does not match"
                    },
                    "17843811134343075018": {
                        "error_kind": "string",
                        "string": "Stack too deep"
                    },
                    "17879506016437779469": {
                        "error_kind": "fmtstring",
                        "length": 128,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "18194595712952743247": {
                        "error_kind": "fmtstring",
                        "length": 98,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    }
                }
            },
            "bytecode": "",
            "debug_symbols": "",
            "brillig_names": [
                "get_contract_instance_internal",
                "decompose_hint",
                "lte_hint",
                "discover_new_messages",
                "notify_created_nullifier_oracle_wrapper",
                "notify_created_note_oracle_wrapper",
                "random",
                "field_less_than",
                "build_msg_block",
                "attach_len_to_msg_block",
                "get_random_bytes",
                "get_random_bytes",
                "get_app_tag_as_sender",
                "increment_app_tagging_secret_index_as_sender_wrapper",
                "directive_invert",
                "directive_to_radix",
                "directive_integer_quotient"
            ],
            "verification_key": "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"
        },
        {
            "name": "fee_entrypoint_private",
            "is_unconstrained": false,
            "custom_attributes": [
                "private"
            ],
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "content_commitment",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                                                    "fields": [
                                                        {
                                                            "name": "num_txs",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "blobs_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "in_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "out_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "slot_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 64
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "gas_fees",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "total_fees",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "total_mana_used",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "tx_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "gas_settings",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                                                    "fields": [
                                                        {
                                                            "name": "gas_limits",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "teardown_gas_limits",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "max_fees_per_gas",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "max_priority_fees_per_gas",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "start_side_effect_counter",
                                    "type": {
                                        "kind": "integer",
                                        "sign": "unsigned",
                                        "width": 32
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "max_fee",
                        "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 128
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "nonce",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "returns_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "min_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "is_fee_payer",
                                "type": {
                                    "kind": "boolean"
                                }
                            },
                            {
                                "name": "max_block_number",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                                    "fields": [
                                        {
                                            "name": "_opt",
                                            "type": {
                                                "kind": "struct",
                                                "path": "std::option::Option",
                                                "fields": [
                                                    {
                                                        "name": "_is_some",
                                                        "type": {
                                                            "kind": "boolean"
                                                        }
                                                    },
                                                    {
                                                        "name": "_value",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "note_hash_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifier_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "key_validation_requests_and_generators",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                                        "fields": [
                                            {
                                                "name": "request",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                                    "fields": [
                                                        {
                                                            "name": "pk_m",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                                                "fields": [
                                                                    {
                                                                        "name": "x",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "y",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "is_infinite",
                                                                        "type": {
                                                                            "kind": "boolean"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "sk_app",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "sk_app_generator",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "note_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 5,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                                        "fields": [
                                            {
                                                "name": "call_context",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "function_selector",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "returns_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "end_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                                        "fields": [
                                            {
                                                "name": "inner",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        },
                                                        {
                                                            "name": "calldata_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_teardown_call_request",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "calldata_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                        "fields": [
                                            {
                                                "name": "recipient",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "content",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_logs",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                                        "fields": [
                                            {
                                                "name": "log",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::log::Log",
                                                    "fields": [
                                                        {
                                                            "name": "fields",
                                                            "type": {
                                                                "kind": "array",
                                                                "length": 18,
                                                                "type": {
                                                                    "kind": "field"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "note_hash_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "contract_class_logs_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 1,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "length",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "start_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "content_commitment",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                                                "fields": [
                                                    {
                                                        "name": "num_txs",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "blobs_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "in_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "out_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "slot_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 64
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "gas_fees",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "total_fees",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "total_mana_used",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "tx_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                                    "fields": [
                                        {
                                            "name": "chain_id",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "version",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "gas_settings",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                                                "fields": [
                                                    {
                                                        "name": "gas_limits",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "teardown_gas_limits",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "max_fees_per_gas",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "max_priority_fees_per_gas",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "visibility": "databus"
                },
                "error_types": {
                    "576755928210959028": {
                        "error_kind": "string",
                        "string": "0 has a square root; you cannot claim it is not square"
                    },
                    "2709101749560550278": {
                        "error_kind": "string",
                        "string": "Cannot serialize point at infinity as bytes."
                    },
                    "2896122431943215824": {
                        "error_kind": "fmtstring",
                        "length": 144,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "2920182694213909827": {
                        "error_kind": "string",
                        "string": "attempt to subtract with overflow"
                    },
                    "3305101268118424981": {
                        "error_kind": "string",
                        "string": "Attempted to delete past the length of a CapsuleArray"
                    },
                    "3367683922240523006": {
                        "error_kind": "fmtstring",
                        "length": 58,
                        "item_types": [
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "5019202896831570965": {
                        "error_kind": "string",
                        "string": "attempt to add with overflow"
                    },
                    "5727012404371710682": {
                        "error_kind": "string",
                        "string": "push out of bounds"
                    },
                    "5870202753060865374": {
                        "error_kind": "fmtstring",
                        "length": 61,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "6336853191198150230": {
                        "error_kind": "fmtstring",
                        "length": 77,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "6485997221020871071": {
                        "error_kind": "string",
                        "string": "call to assert_max_bit_size"
                    },
                    "6753155520859132764": {
                        "error_kind": "string",
                        "string": "Failed to deliver note"
                    },
                    "7233212735005103307": {
                        "error_kind": "string",
                        "string": "attempt to multiply with overflow"
                    },
                    "8270195893599566439": {
                        "error_kind": "string",
                        "string": "Invalid public keys hint for address"
                    },
                    "8830323656616886390": {
                        "error_kind": "string",
                        "string": "Got a public log emitted by a different contract"
                    },
                    "12099279057757775880": {
                        "error_kind": "string",
                        "string": "DST_LEN too large for offset"
                    },
                    "12822839658937144934": {
                        "error_kind": "fmtstring",
                        "length": 75,
                        "item_types": []
                    },
                    "13649294680379557736": {
                        "error_kind": "string",
                        "string": "extend_from_bounded_vec out of bounds"
                    },
                    "14225679739041873922": {
                        "error_kind": "string",
                        "string": "Index out of bounds"
                    },
                    "14514982005979867414": {
                        "error_kind": "string",
                        "string": "attempt to bit-shift with overflow"
                    },
                    "14657895983200220173": {
                        "error_kind": "string",
                        "string": "Attempted to read past the length of a CapsuleArray"
                    },
                    "15366650908120444287": {
                        "error_kind": "fmtstring",
                        "length": 48,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "16218014537381711836": {
                        "error_kind": "string",
                        "string": "Value does not fit in field"
                    },
                    "16446004518090376065": {
                        "error_kind": "string",
                        "string": "Input length must be a multiple of 32"
                    },
                    "16954218183513903507": {
                        "error_kind": "string",
                        "string": "Attempted to read past end of BoundedVec"
                    },
                    "17843811134343075018": {
                        "error_kind": "string",
                        "string": "Stack too deep"
                    },
                    "17879506016437779469": {
                        "error_kind": "fmtstring",
                        "length": 128,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "18194595712952743247": {
                        "error_kind": "fmtstring",
                        "length": 98,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    }
                }
            },
            "bytecode": "",
            "debug_symbols": "",
            "brillig_names": [
                "discover_new_messages",
                "debug_log_oracle_wrapper"
            ],
            "verification_key": "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"
        },
        {
            "name": "entrypoint",
            "is_unconstrained": false,
            "custom_attributes": [
                "private",
                "noinitcheck"
            ],
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "content_commitment",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                                                    "fields": [
                                                        {
                                                            "name": "num_txs",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "blobs_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "in_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "out_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "slot_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 64
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "gas_fees",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "total_fees",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "total_mana_used",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "tx_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "gas_settings",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                                                    "fields": [
                                                        {
                                                            "name": "gas_limits",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "teardown_gas_limits",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "max_fees_per_gas",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "max_priority_fees_per_gas",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "start_side_effect_counter",
                                    "type": {
                                        "kind": "integer",
                                        "sign": "unsigned",
                                        "width": 32
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "app_payload",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::entrypoint::app::AppPayload",
                            "fields": [
                                {
                                    "name": "function_calls",
                                    "type": {
                                        "kind": "array",
                                        "length": 4,
                                        "type": {
                                            "kind": "struct",
                                            "path": "authwit::entrypoint::function_call::FunctionCall",
                                            "fields": [
                                                {
                                                    "name": "args_hash",
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                },
                                                {
                                                    "name": "function_selector",
                                                    "type": {
                                                        "kind": "struct",
                                                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                        "fields": [
                                                            {
                                                                "name": "inner",
                                                                "type": {
                                                                    "kind": "integer",
                                                                    "sign": "unsigned",
                                                                    "width": 32
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "name": "target_address",
                                                    "type": {
                                                        "kind": "struct",
                                                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                        "fields": [
                                                            {
                                                                "name": "inner",
                                                                "type": {
                                                                    "kind": "field"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "name": "is_public",
                                                    "type": {
                                                        "kind": "boolean"
                                                    }
                                                },
                                                {
                                                    "name": "is_static",
                                                    "type": {
                                                        "kind": "boolean"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "name": "nonce",
                                    "type": {
                                        "kind": "field"
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "fee_payload",
                        "type": {
                            "kind": "struct",
                            "path": "authwit::entrypoint::fee::FeePayload",
                            "fields": [
                                {
                                    "name": "function_calls",
                                    "type": {
                                        "kind": "array",
                                        "length": 2,
                                        "type": {
                                            "kind": "struct",
                                            "path": "authwit::entrypoint::function_call::FunctionCall",
                                            "fields": [
                                                {
                                                    "name": "args_hash",
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                },
                                                {
                                                    "name": "function_selector",
                                                    "type": {
                                                        "kind": "struct",
                                                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                        "fields": [
                                                            {
                                                                "name": "inner",
                                                                "type": {
                                                                    "kind": "integer",
                                                                    "sign": "unsigned",
                                                                    "width": 32
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "name": "target_address",
                                                    "type": {
                                                        "kind": "struct",
                                                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                        "fields": [
                                                            {
                                                                "name": "inner",
                                                                "type": {
                                                                    "kind": "field"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "name": "is_public",
                                                    "type": {
                                                        "kind": "boolean"
                                                    }
                                                },
                                                {
                                                    "name": "is_static",
                                                    "type": {
                                                        "kind": "boolean"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "name": "nonce",
                                    "type": {
                                        "kind": "field"
                                    }
                                },
                                {
                                    "name": "is_fee_payer",
                                    "type": {
                                        "kind": "boolean"
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "cancellable",
                        "type": {
                            "kind": "boolean"
                        },
                        "visibility": "private"
                    }
                ],
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "returns_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "min_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "is_fee_payer",
                                "type": {
                                    "kind": "boolean"
                                }
                            },
                            {
                                "name": "max_block_number",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                                    "fields": [
                                        {
                                            "name": "_opt",
                                            "type": {
                                                "kind": "struct",
                                                "path": "std::option::Option",
                                                "fields": [
                                                    {
                                                        "name": "_is_some",
                                                        "type": {
                                                            "kind": "boolean"
                                                        }
                                                    },
                                                    {
                                                        "name": "_value",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "note_hash_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifier_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "key_validation_requests_and_generators",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                                        "fields": [
                                            {
                                                "name": "request",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                                    "fields": [
                                                        {
                                                            "name": "pk_m",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                                                "fields": [
                                                                    {
                                                                        "name": "x",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "y",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "is_infinite",
                                                                        "type": {
                                                                            "kind": "boolean"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "sk_app",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "sk_app_generator",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "note_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 5,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                                        "fields": [
                                            {
                                                "name": "call_context",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "function_selector",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "returns_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "end_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                                        "fields": [
                                            {
                                                "name": "inner",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        },
                                                        {
                                                            "name": "calldata_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_teardown_call_request",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "calldata_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                        "fields": [
                                            {
                                                "name": "recipient",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "content",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_logs",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                                        "fields": [
                                            {
                                                "name": "log",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::log::Log",
                                                    "fields": [
                                                        {
                                                            "name": "fields",
                                                            "type": {
                                                                "kind": "array",
                                                                "length": 18,
                                                                "type": {
                                                                    "kind": "field"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "note_hash_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "contract_class_logs_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 1,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "length",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "start_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "content_commitment",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                                                "fields": [
                                                    {
                                                        "name": "num_txs",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "blobs_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "in_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "out_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "slot_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 64
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "gas_fees",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "total_fees",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "total_mana_used",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "tx_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                                    "fields": [
                                        {
                                            "name": "chain_id",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "version",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "gas_settings",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                                                "fields": [
                                                    {
                                                        "name": "gas_limits",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "teardown_gas_limits",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "max_fees_per_gas",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "max_priority_fees_per_gas",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "visibility": "databus"
                },
                "error_types": {
                    "576755928210959028": {
                        "error_kind": "string",
                        "string": "0 has a square root; you cannot claim it is not square"
                    },
                    "2709101749560550278": {
                        "error_kind": "string",
                        "string": "Cannot serialize point at infinity as bytes."
                    },
                    "2896122431943215824": {
                        "error_kind": "fmtstring",
                        "length": 144,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "2920182694213909827": {
                        "error_kind": "string",
                        "string": "attempt to subtract with overflow"
                    },
                    "3305101268118424981": {
                        "error_kind": "string",
                        "string": "Attempted to delete past the length of a CapsuleArray"
                    },
                    "3367683922240523006": {
                        "error_kind": "fmtstring",
                        "length": 58,
                        "item_types": [
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "5019202896831570965": {
                        "error_kind": "string",
                        "string": "attempt to add with overflow"
                    },
                    "5727012404371710682": {
                        "error_kind": "string",
                        "string": "push out of bounds"
                    },
                    "5870202753060865374": {
                        "error_kind": "fmtstring",
                        "length": 61,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "6336853191198150230": {
                        "error_kind": "fmtstring",
                        "length": 77,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "6485997221020871071": {
                        "error_kind": "string",
                        "string": "call to assert_max_bit_size"
                    },
                    "6753155520859132764": {
                        "error_kind": "string",
                        "string": "Failed to deliver note"
                    },
                    "7233212735005103307": {
                        "error_kind": "string",
                        "string": "attempt to multiply with overflow"
                    },
                    "8270195893599566439": {
                        "error_kind": "string",
                        "string": "Invalid public keys hint for address"
                    },
                    "8830323656616886390": {
                        "error_kind": "string",
                        "string": "Got a public log emitted by a different contract"
                    },
                    "12099279057757775880": {
                        "error_kind": "string",
                        "string": "DST_LEN too large for offset"
                    },
                    "12822839658937144934": {
                        "error_kind": "fmtstring",
                        "length": 75,
                        "item_types": []
                    },
                    "13649294680379557736": {
                        "error_kind": "string",
                        "string": "extend_from_bounded_vec out of bounds"
                    },
                    "14225679739041873922": {
                        "error_kind": "string",
                        "string": "Index out of bounds"
                    },
                    "14514982005979867414": {
                        "error_kind": "string",
                        "string": "attempt to bit-shift with overflow"
                    },
                    "14657895983200220173": {
                        "error_kind": "string",
                        "string": "Attempted to read past the length of a CapsuleArray"
                    },
                    "15366650908120444287": {
                        "error_kind": "fmtstring",
                        "length": 48,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "16218014537381711836": {
                        "error_kind": "string",
                        "string": "Value does not fit in field"
                    },
                    "16446004518090376065": {
                        "error_kind": "string",
                        "string": "Input length must be a multiple of 32"
                    },
                    "16954218183513903507": {
                        "error_kind": "string",
                        "string": "Attempted to read past end of BoundedVec"
                    },
                    "17843811134343075018": {
                        "error_kind": "string",
                        "string": "Stack too deep"
                    },
                    "17879506016437779469": {
                        "error_kind": "fmtstring",
                        "length": 128,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "18194595712952743247": {
                        "error_kind": "fmtstring",
                        "length": 98,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    }
                }
            },
            "bytecode": "",
            "debug_symbols": "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VD1qKelRS0mPWkp61FLSo5ayHrWU9ailrEctZT1qqfvM7YGh6lFLWY9aynrUUtajlrIetVT0qKWiRy0VPWqp6FFL3WduDwxVj1oqetRS0aOWih61VNSopWzUqKVs1KilbNSopWzUqKVsSE+oatRSNmrUUjZq1FI2atRSNnrUktWjlqwetWT1qCWrRy11n7k9MFQ9asnqUUtWj1qyetSS1aOWnB615PSoJadHLTk9aqn7zO2BoepRS06PWnJ61JLTo5acHrXk9aglr0cteT1qyetRS91nbg8MVY9a8nrUktejlrweteSnVksphrxdnWIOz6H+Xj5NrYDqy59a1dSXP7VSqS9/avVRXz7JXv7UKqG+/Kl3/vryp97N68ufeoeuL1/2rjv3nOf68mXvunPPY64vX/auO/fc5PryZe+6c883ri9f9q479xzi+vJl77pzzwuuL1/2rjv3XN/68mXvunPP360vX/auO/ec3PryZe+6c8+zrS9f9q4799zZ+vJl77pzz4etL1/2rjv3HNf68mXvunPPW60vX/auO/dc1PryZe+6c88vrS+fYdct8XHYKdH58rOz2ytn9+uKr4tdPvpKQCq0XZ1K8ZWrfdowkn8swx2t2SXarnUpVC7+NQlnz4+NlYvN/srWPJ0nerv4DtwBeF/gf65snNn/im4XV/5AQwlbdkLJ+fkv7vBPf4+0mMd3XmzY/j6p7+rj7Yqvi6M17nz1zlLYPoxu/z76eAmylx9lLz/JXn6Wvfwidvm3//hv//ZP//zP//Q//+s//+t//4f/+Kd//Zd//3Wz+fV/7JvfGBVjv17Qm/j40La3j7VfPN78XKd2V2q6KzfdVVruevPThtpdtuku13SXb7qLmu5qqg3fVBu+qTZ8U234ptqgptqgptqgptqgptqgptqgptqgptqgptqgptqgptoITbURmmojNNVGaKqN0FQboak2QlNthKbaCE21EZpqIzbVRmyqjdhUG7GpNmJTbcSm2ohNtRGbaiM21UZsqo3UVBupqTZSU22kptpITbWRmmojNdVGaqqN1FQbqak2clNt5KbayE21kZtqIzfVRm6qjdxUG8dW25vdZHlTnto7dmtONd1VWu46Pjqiepdtuss13XVYG/7W4Nvucq58u+ugoRbi3h6P1j1dTQdXU95bdf4pp+Ge0+MB/h+uJ+8/avs1Caqy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",
            "brillig_names": [
                "discover_new_messages",
                "notify_enqueued_public_function_call_wrapper",
                "call_private_function_internal",
                "debug_log_oracle_wrapper",
                "notify_set_min_revertible_side_effect_counter_oracle_wrapper",
                "notify_created_nullifier_oracle_wrapper",
                "directive_invert",
                "directive_integer_quotient"
            ],
            "verification_key": "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"
        },
        {
            "name": "get_accepted_asset",
            "is_unconstrained": false,
            "custom_attributes": [
                "private"
            ],
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "content_commitment",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                                                    "fields": [
                                                        {
                                                            "name": "num_txs",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "blobs_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "in_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "out_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "slot_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 64
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "gas_fees",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "total_fees",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "total_mana_used",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "tx_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "gas_settings",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                                                    "fields": [
                                                        {
                                                            "name": "gas_limits",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "teardown_gas_limits",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "max_fees_per_gas",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "max_priority_fees_per_gas",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "start_side_effect_counter",
                                    "type": {
                                        "kind": "integer",
                                        "sign": "unsigned",
                                        "width": 32
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    }
                ],
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "returns_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "min_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "is_fee_payer",
                                "type": {
                                    "kind": "boolean"
                                }
                            },
                            {
                                "name": "max_block_number",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                                    "fields": [
                                        {
                                            "name": "_opt",
                                            "type": {
                                                "kind": "struct",
                                                "path": "std::option::Option",
                                                "fields": [
                                                    {
                                                        "name": "_is_some",
                                                        "type": {
                                                            "kind": "boolean"
                                                        }
                                                    },
                                                    {
                                                        "name": "_value",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "note_hash_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifier_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "key_validation_requests_and_generators",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                                        "fields": [
                                            {
                                                "name": "request",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                                    "fields": [
                                                        {
                                                            "name": "pk_m",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                                                "fields": [
                                                                    {
                                                                        "name": "x",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "y",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "is_infinite",
                                                                        "type": {
                                                                            "kind": "boolean"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "sk_app",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "sk_app_generator",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "note_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 5,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                                        "fields": [
                                            {
                                                "name": "call_context",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "function_selector",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "returns_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "end_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                                        "fields": [
                                            {
                                                "name": "inner",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        },
                                                        {
                                                            "name": "calldata_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_teardown_call_request",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "calldata_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                        "fields": [
                                            {
                                                "name": "recipient",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "content",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_logs",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                                        "fields": [
                                            {
                                                "name": "log",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::log::Log",
                                                    "fields": [
                                                        {
                                                            "name": "fields",
                                                            "type": {
                                                                "kind": "array",
                                                                "length": 18,
                                                                "type": {
                                                                    "kind": "field"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "note_hash_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "contract_class_logs_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 1,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "length",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "start_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "content_commitment",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                                                "fields": [
                                                    {
                                                        "name": "num_txs",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "blobs_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "in_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "out_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "slot_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 64
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "gas_fees",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "total_fees",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "total_mana_used",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "tx_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                                    "fields": [
                                        {
                                            "name": "chain_id",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "version",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "gas_settings",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                                                "fields": [
                                                    {
                                                        "name": "gas_limits",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "teardown_gas_limits",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "max_fees_per_gas",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "max_priority_fees_per_gas",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "visibility": "databus"
                },
                "error_types": {
                    "576755928210959028": {
                        "error_kind": "string",
                        "string": "0 has a square root; you cannot claim it is not square"
                    },
                    "2709101749560550278": {
                        "error_kind": "string",
                        "string": "Cannot serialize point at infinity as bytes."
                    },
                    "2896122431943215824": {
                        "error_kind": "fmtstring",
                        "length": 144,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "2920182694213909827": {
                        "error_kind": "string",
                        "string": "attempt to subtract with overflow"
                    },
                    "3305101268118424981": {
                        "error_kind": "string",
                        "string": "Attempted to delete past the length of a CapsuleArray"
                    },
                    "3367683922240523006": {
                        "error_kind": "fmtstring",
                        "length": 58,
                        "item_types": [
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "5019202896831570965": {
                        "error_kind": "string",
                        "string": "attempt to add with overflow"
                    },
                    "5727012404371710682": {
                        "error_kind": "string",
                        "string": "push out of bounds"
                    },
                    "5870202753060865374": {
                        "error_kind": "fmtstring",
                        "length": 61,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "6336853191198150230": {
                        "error_kind": "fmtstring",
                        "length": 77,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "6485997221020871071": {
                        "error_kind": "string",
                        "string": "call to assert_max_bit_size"
                    },
                    "6753155520859132764": {
                        "error_kind": "string",
                        "string": "Failed to deliver note"
                    },
                    "7233212735005103307": {
                        "error_kind": "string",
                        "string": "attempt to multiply with overflow"
                    },
                    "8270195893599566439": {
                        "error_kind": "string",
                        "string": "Invalid public keys hint for address"
                    },
                    "8830323656616886390": {
                        "error_kind": "string",
                        "string": "Got a public log emitted by a different contract"
                    },
                    "12099279057757775880": {
                        "error_kind": "string",
                        "string": "DST_LEN too large for offset"
                    },
                    "12822839658937144934": {
                        "error_kind": "fmtstring",
                        "length": 75,
                        "item_types": []
                    },
                    "13649294680379557736": {
                        "error_kind": "string",
                        "string": "extend_from_bounded_vec out of bounds"
                    },
                    "14225679739041873922": {
                        "error_kind": "string",
                        "string": "Index out of bounds"
                    },
                    "14514982005979867414": {
                        "error_kind": "string",
                        "string": "attempt to bit-shift with overflow"
                    },
                    "14657895983200220173": {
                        "error_kind": "string",
                        "string": "Attempted to read past the length of a CapsuleArray"
                    },
                    "15366650908120444287": {
                        "error_kind": "fmtstring",
                        "length": 48,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "16218014537381711836": {
                        "error_kind": "string",
                        "string": "Value does not fit in field"
                    },
                    "16446004518090376065": {
                        "error_kind": "string",
                        "string": "Input length must be a multiple of 32"
                    },
                    "16954218183513903507": {
                        "error_kind": "string",
                        "string": "Attempted to read past end of BoundedVec"
                    },
                    "17843811134343075018": {
                        "error_kind": "string",
                        "string": "Stack too deep"
                    },
                    "17879506016437779469": {
                        "error_kind": "fmtstring",
                        "length": 128,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "18194595712952743247": {
                        "error_kind": "fmtstring",
                        "length": 98,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    }
                }
            },
            "bytecode": "",
            "debug_symbols": "",
            "brillig_names": [
                "discover_new_messages",
                "store_in_execution_cache_oracle_wrapper"
            ],
            "verification_key": "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"
        },
        {
            "name": "fee_entrypoint_public",
            "is_unconstrained": false,
            "custom_attributes": [
                "private"
            ],
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "content_commitment",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                                                    "fields": [
                                                        {
                                                            "name": "num_txs",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "blobs_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "in_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "out_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "slot_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 64
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "gas_fees",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "total_fees",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "total_mana_used",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "tx_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "gas_settings",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                                                    "fields": [
                                                        {
                                                            "name": "gas_limits",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "teardown_gas_limits",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "max_fees_per_gas",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "max_priority_fees_per_gas",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "start_side_effect_counter",
                                    "type": {
                                        "kind": "integer",
                                        "sign": "unsigned",
                                        "width": 32
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "max_fee",
                        "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 128
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "nonce",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "returns_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "min_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "is_fee_payer",
                                "type": {
                                    "kind": "boolean"
                                }
                            },
                            {
                                "name": "max_block_number",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                                    "fields": [
                                        {
                                            "name": "_opt",
                                            "type": {
                                                "kind": "struct",
                                                "path": "std::option::Option",
                                                "fields": [
                                                    {
                                                        "name": "_is_some",
                                                        "type": {
                                                            "kind": "boolean"
                                                        }
                                                    },
                                                    {
                                                        "name": "_value",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "note_hash_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifier_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "key_validation_requests_and_generators",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                                        "fields": [
                                            {
                                                "name": "request",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                                    "fields": [
                                                        {
                                                            "name": "pk_m",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                                                "fields": [
                                                                    {
                                                                        "name": "x",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "y",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "is_infinite",
                                                                        "type": {
                                                                            "kind": "boolean"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "sk_app",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "sk_app_generator",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "note_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 5,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                                        "fields": [
                                            {
                                                "name": "call_context",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "function_selector",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "returns_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "end_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                                        "fields": [
                                            {
                                                "name": "inner",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        },
                                                        {
                                                            "name": "calldata_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_teardown_call_request",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "calldata_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                        "fields": [
                                            {
                                                "name": "recipient",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "content",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_logs",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                                        "fields": [
                                            {
                                                "name": "log",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::log::Log",
                                                    "fields": [
                                                        {
                                                            "name": "fields",
                                                            "type": {
                                                                "kind": "array",
                                                                "length": 18,
                                                                "type": {
                                                                    "kind": "field"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "note_hash_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "contract_class_logs_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 1,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "length",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "start_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "content_commitment",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                                                "fields": [
                                                    {
                                                        "name": "num_txs",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "blobs_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "in_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "out_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "slot_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 64
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "gas_fees",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "total_fees",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "total_mana_used",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "tx_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                                    "fields": [
                                        {
                                            "name": "chain_id",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "version",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "gas_settings",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                                                "fields": [
                                                    {
                                                        "name": "gas_limits",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "teardown_gas_limits",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "max_fees_per_gas",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "max_priority_fees_per_gas",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "visibility": "databus"
                },
                "error_types": {
                    "576755928210959028": {
                        "error_kind": "string",
                        "string": "0 has a square root; you cannot claim it is not square"
                    },
                    "2709101749560550278": {
                        "error_kind": "string",
                        "string": "Cannot serialize point at infinity as bytes."
                    },
                    "2896122431943215824": {
                        "error_kind": "fmtstring",
                        "length": 144,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "2920182694213909827": {
                        "error_kind": "string",
                        "string": "attempt to subtract with overflow"
                    },
                    "3305101268118424981": {
                        "error_kind": "string",
                        "string": "Attempted to delete past the length of a CapsuleArray"
                    },
                    "3367683922240523006": {
                        "error_kind": "fmtstring",
                        "length": 58,
                        "item_types": [
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "5019202896831570965": {
                        "error_kind": "string",
                        "string": "attempt to add with overflow"
                    },
                    "5727012404371710682": {
                        "error_kind": "string",
                        "string": "push out of bounds"
                    },
                    "5870202753060865374": {
                        "error_kind": "fmtstring",
                        "length": 61,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "6336853191198150230": {
                        "error_kind": "fmtstring",
                        "length": 77,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "6485997221020871071": {
                        "error_kind": "string",
                        "string": "call to assert_max_bit_size"
                    },
                    "6753155520859132764": {
                        "error_kind": "string",
                        "string": "Failed to deliver note"
                    },
                    "7233212735005103307": {
                        "error_kind": "string",
                        "string": "attempt to multiply with overflow"
                    },
                    "8270195893599566439": {
                        "error_kind": "string",
                        "string": "Invalid public keys hint for address"
                    },
                    "8830323656616886390": {
                        "error_kind": "string",
                        "string": "Got a public log emitted by a different contract"
                    },
                    "12099279057757775880": {
                        "error_kind": "string",
                        "string": "DST_LEN too large for offset"
                    },
                    "12822839658937144934": {
                        "error_kind": "fmtstring",
                        "length": 75,
                        "item_types": []
                    },
                    "13649294680379557736": {
                        "error_kind": "string",
                        "string": "extend_from_bounded_vec out of bounds"
                    },
                    "14225679739041873922": {
                        "error_kind": "string",
                        "string": "Index out of bounds"
                    },
                    "14514982005979867414": {
                        "error_kind": "string",
                        "string": "attempt to bit-shift with overflow"
                    },
                    "14657895983200220173": {
                        "error_kind": "string",
                        "string": "Attempted to read past the length of a CapsuleArray"
                    },
                    "15366650908120444287": {
                        "error_kind": "fmtstring",
                        "length": 48,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "16218014537381711836": {
                        "error_kind": "string",
                        "string": "Value does not fit in field"
                    },
                    "16446004518090376065": {
                        "error_kind": "string",
                        "string": "Input length must be a multiple of 32"
                    },
                    "16954218183513903507": {
                        "error_kind": "string",
                        "string": "Attempted to read past end of BoundedVec"
                    },
                    "17843811134343075018": {
                        "error_kind": "string",
                        "string": "Stack too deep"
                    },
                    "17879506016437779469": {
                        "error_kind": "fmtstring",
                        "length": 128,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "18194595712952743247": {
                        "error_kind": "fmtstring",
                        "length": 98,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    }
                }
            },
            "bytecode": "",
            "debug_symbols": "",
            "brillig_names": [
                "discover_new_messages",
                "debug_log_oracle_wrapper"
            ],
            "verification_key": "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"
        },
        {
            "name": "verify_private_authwit",
            "is_unconstrained": false,
            "custom_attributes": [
                "private",
                "noinitcheck",
                "view"
            ],
            "abi": {
                "parameters": [
                    {
                        "name": "inputs",
                        "type": {
                            "kind": "struct",
                            "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
                            "fields": [
                                {
                                    "name": "call_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                        "fields": [
                                            {
                                                "name": "msg_sender",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "contract_address",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "is_static_call",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "historical_header",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                                        "fields": [
                                            {
                                                "name": "last_archive",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                    "fields": [
                                                        {
                                                            "name": "root",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "next_available_leaf_index",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 32
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "content_commitment",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                                                    "fields": [
                                                        {
                                                            "name": "num_txs",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "blobs_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "in_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "out_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "state",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                    "fields": [
                                                        {
                                                            "name": "l1_to_l2_message_tree",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                "fields": [
                                                                    {
                                                                        "name": "root",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "next_available_leaf_index",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "partial",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                                "fields": [
                                                                    {
                                                                        "name": "note_hash_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "nullifier_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "public_data_tree",
                                                                        "type": {
                                                                            "kind": "struct",
                                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                            "fields": [
                                                                                {
                                                                                    "name": "root",
                                                                                    "type": {
                                                                                        "kind": "field"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "name": "next_available_leaf_index",
                                                                                    "type": {
                                                                                        "kind": "integer",
                                                                                        "sign": "unsigned",
                                                                                        "width": 32
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "global_variables",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                    "fields": [
                                                        {
                                                            "name": "chain_id",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "version",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "block_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "slot_number",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        },
                                                        {
                                                            "name": "timestamp",
                                                            "type": {
                                                                "kind": "integer",
                                                                "sign": "unsigned",
                                                                "width": 64
                                                            }
                                                        },
                                                        {
                                                            "name": "coinbase",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "fee_recipient",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "gas_fees",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "total_fees",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "total_mana_used",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "tx_context",
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                                        "fields": [
                                            {
                                                "name": "chain_id",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "version",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "gas_settings",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                                                    "fields": [
                                                        {
                                                            "name": "gas_limits",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "teardown_gas_limits",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                                "fields": [
                                                                    {
                                                                        "name": "da_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "l2_gas",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "max_fees_per_gas",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "max_priority_fees_per_gas",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                                "fields": [
                                                                    {
                                                                        "name": "fee_per_da_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "fee_per_l2_gas",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "start_side_effect_counter",
                                    "type": {
                                        "kind": "integer",
                                        "sign": "unsigned",
                                        "width": 32
                                    }
                                }
                            ]
                        },
                        "visibility": "private"
                    },
                    {
                        "name": "inner_hash",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "return_type": {
                    "abi_type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
                        "fields": [
                            {
                                "name": "call_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "function_selector",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "args_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "returns_hash",
                                "type": {
                                    "kind": "field"
                                }
                            },
                            {
                                "name": "min_revertible_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "is_fee_payer",
                                "type": {
                                    "kind": "boolean"
                                }
                            },
                            {
                                "name": "max_block_number",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                                    "fields": [
                                        {
                                            "name": "_opt",
                                            "type": {
                                                "kind": "struct",
                                                "path": "std::option::Option",
                                                "fields": [
                                                    {
                                                        "name": "_is_some",
                                                        "type": {
                                                            "kind": "boolean"
                                                        }
                                                    },
                                                    {
                                                        "name": "_value",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "note_hash_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifier_read_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "key_validation_requests_and_generators",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                                        "fields": [
                                            {
                                                "name": "request",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                                    "fields": [
                                                        {
                                                            "name": "pk_m",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                                                "fields": [
                                                                    {
                                                                        "name": "x",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "y",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    },
                                                                    {
                                                                        "name": "is_infinite",
                                                                        "type": {
                                                                            "kind": "boolean"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "sk_app",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "sk_app_generator",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "note_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nullifiers",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "note_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 5,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                                        "fields": [
                                            {
                                                "name": "call_context",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "function_selector",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "integer",
                                                                            "sign": "unsigned",
                                                                            "width": 32
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "returns_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "start_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "end_side_effect_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_call_requests",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                                        "fields": [
                                            {
                                                "name": "inner",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                                    "fields": [
                                                        {
                                                            "name": "msg_sender",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "contract_address",
                                                            "type": {
                                                                "kind": "struct",
                                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                                "fields": [
                                                                    {
                                                                        "name": "inner",
                                                                        "type": {
                                                                            "kind": "field"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "name": "is_static_call",
                                                            "type": {
                                                                "kind": "boolean"
                                                            }
                                                        },
                                                        {
                                                            "name": "calldata_hash",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "public_teardown_call_request",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                    "fields": [
                                        {
                                            "name": "msg_sender",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "contract_address",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                "fields": [
                                                    {
                                                        "name": "inner",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_static_call",
                                            "type": {
                                                "kind": "boolean"
                                            }
                                        },
                                        {
                                            "name": "calldata_hash",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "l2_to_l1_msgs",
                                "type": {
                                    "kind": "array",
                                    "length": 2,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                        "fields": [
                                            {
                                                "name": "recipient",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                    "fields": [
                                                        {
                                                            "name": "inner",
                                                            "type": {
                                                                "kind": "field"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "content",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "private_logs",
                                "type": {
                                    "kind": "array",
                                    "length": 16,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                                        "fields": [
                                            {
                                                "name": "log",
                                                "type": {
                                                    "kind": "struct",
                                                    "path": "authwit::aztec::protocol_types::abis::log::Log",
                                                    "fields": [
                                                        {
                                                            "name": "fields",
                                                            "type": {
                                                                "kind": "array",
                                                                "length": 18,
                                                                "type": {
                                                                    "kind": "field"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "note_hash_counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "contract_class_logs_hashes",
                                "type": {
                                    "kind": "array",
                                    "length": 1,
                                    "type": {
                                        "kind": "struct",
                                        "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                                        "fields": [
                                            {
                                                "name": "value",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "counter",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            },
                                            {
                                                "name": "length",
                                                "type": {
                                                    "kind": "integer",
                                                    "sign": "unsigned",
                                                    "width": 32
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "start_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "end_side_effect_counter",
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                }
                            },
                            {
                                "name": "historical_header",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                                    "fields": [
                                        {
                                            "name": "last_archive",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                "fields": [
                                                    {
                                                        "name": "root",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "next_available_leaf_index",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 32
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "content_commitment",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                                                "fields": [
                                                    {
                                                        "name": "num_txs",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "blobs_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "in_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "out_hash",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "state",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                                                "fields": [
                                                    {
                                                        "name": "l1_to_l2_message_tree",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                            "fields": [
                                                                {
                                                                    "name": "root",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "next_available_leaf_index",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "partial",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                                            "fields": [
                                                                {
                                                                    "name": "note_hash_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "nullifier_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "name": "public_data_tree",
                                                                    "type": {
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                                                        "fields": [
                                                                            {
                                                                                "name": "root",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            },
                                                                            {
                                                                                "name": "next_available_leaf_index",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "global_variables",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                                                "fields": [
                                                    {
                                                        "name": "chain_id",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "version",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "block_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "slot_number",
                                                        "type": {
                                                            "kind": "field"
                                                        }
                                                    },
                                                    {
                                                        "name": "timestamp",
                                                        "type": {
                                                            "kind": "integer",
                                                            "sign": "unsigned",
                                                            "width": 64
                                                        }
                                                    },
                                                    {
                                                        "name": "coinbase",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "fee_recipient",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                                            "fields": [
                                                                {
                                                                    "name": "inner",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "gas_fees",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "name": "total_fees",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "total_mana_used",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "tx_context",
                                "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                                    "fields": [
                                        {
                                            "name": "chain_id",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "version",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "gas_settings",
                                            "type": {
                                                "kind": "struct",
                                                "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                                                "fields": [
                                                    {
                                                        "name": "gas_limits",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "teardown_gas_limits",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                                            "fields": [
                                                                {
                                                                    "name": "da_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                },
                                                                {
                                                                    "name": "l2_gas",
                                                                    "type": {
                                                                        "kind": "integer",
                                                                        "sign": "unsigned",
                                                                        "width": 32
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "max_fees_per_gas",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "name": "max_priority_fees_per_gas",
                                                        "type": {
                                                            "kind": "struct",
                                                            "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                                            "fields": [
                                                                {
                                                                    "name": "fee_per_da_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "fee_per_l2_gas",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "visibility": "databus"
                },
                "error_types": {
                    "19458536156181958": {
                        "error_kind": "string",
                        "string": "Function verify_private_authwit can only be called statically"
                    },
                    "576755928210959028": {
                        "error_kind": "string",
                        "string": "0 has a square root; you cannot claim it is not square"
                    },
                    "2709101749560550278": {
                        "error_kind": "string",
                        "string": "Cannot serialize point at infinity as bytes."
                    },
                    "2896122431943215824": {
                        "error_kind": "fmtstring",
                        "length": 144,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "2920182694213909827": {
                        "error_kind": "string",
                        "string": "attempt to subtract with overflow"
                    },
                    "3305101268118424981": {
                        "error_kind": "string",
                        "string": "Attempted to delete past the length of a CapsuleArray"
                    },
                    "3367683922240523006": {
                        "error_kind": "fmtstring",
                        "length": 58,
                        "item_types": [
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "5019202896831570965": {
                        "error_kind": "string",
                        "string": "attempt to add with overflow"
                    },
                    "5727012404371710682": {
                        "error_kind": "string",
                        "string": "push out of bounds"
                    },
                    "5870202753060865374": {
                        "error_kind": "fmtstring",
                        "length": 61,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "6336853191198150230": {
                        "error_kind": "fmtstring",
                        "length": 77,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "6485997221020871071": {
                        "error_kind": "string",
                        "string": "call to assert_max_bit_size"
                    },
                    "6753155520859132764": {
                        "error_kind": "string",
                        "string": "Failed to deliver note"
                    },
                    "7233212735005103307": {
                        "error_kind": "string",
                        "string": "attempt to multiply with overflow"
                    },
                    "8270195893599566439": {
                        "error_kind": "string",
                        "string": "Invalid public keys hint for address"
                    },
                    "8830323656616886390": {
                        "error_kind": "string",
                        "string": "Got a public log emitted by a different contract"
                    },
                    "12099279057757775880": {
                        "error_kind": "string",
                        "string": "DST_LEN too large for offset"
                    },
                    "12822839658937144934": {
                        "error_kind": "fmtstring",
                        "length": 75,
                        "item_types": []
                    },
                    "13649294680379557736": {
                        "error_kind": "string",
                        "string": "extend_from_bounded_vec out of bounds"
                    },
                    "14225679739041873922": {
                        "error_kind": "string",
                        "string": "Index out of bounds"
                    },
                    "14514982005979867414": {
                        "error_kind": "string",
                        "string": "attempt to bit-shift with overflow"
                    },
                    "14657895983200220173": {
                        "error_kind": "string",
                        "string": "Attempted to read past the length of a CapsuleArray"
                    },
                    "15366650908120444287": {
                        "error_kind": "fmtstring",
                        "length": 48,
                        "item_types": [
                            {
                                "kind": "field"
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    },
                    "16218014537381711836": {
                        "error_kind": "string",
                        "string": "Value does not fit in field"
                    },
                    "16446004518090376065": {
                        "error_kind": "string",
                        "string": "Input length must be a multiple of 32"
                    },
                    "16954218183513903507": {
                        "error_kind": "string",
                        "string": "Attempted to read past end of BoundedVec"
                    },
                    "17843811134343075018": {
                        "error_kind": "string",
                        "string": "Stack too deep"
                    },
                    "17879506016437779469": {
                        "error_kind": "fmtstring",
                        "length": 128,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        ]
                    },
                    "18194595712952743247": {
                        "error_kind": "fmtstring",
                        "length": 98,
                        "item_types": [
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            },
                            {
                                "kind": "field"
                            }
                        ]
                    }
                }
            },
            "bytecode": "",
            "debug_symbols": "",
            "brillig_names": [
                "discover_new_messages",
                "store_in_execution_cache_oracle_wrapper"
            ],
            "verification_key": "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"
        },
        {
            "name": "public_dispatch",
            "is_unconstrained": true,
            "custom_attributes": [
                "public"
            ],
            "abi": {
                "parameters": [
                    {
                        "name": "selector",
                        "type": {
                            "kind": "field"
                        },
                        "visibility": "private"
                    }
                ],
                "return_type": null,
                "error_types": {
                    "1752556835457866331": {
                        "error_kind": "string",
                        "string": "No public functions"
                    }
                }
            },
            "bytecode": "JwAABAEqAAABBRhSVSgKJhpbPAABAA==",
            "debug_symbols": "XYxLCoAwDAXvkrUn8Coi0k9aAqEpsRWk9O5+cCFdzhveNPBoa9woBdlhXhqwOFNI0k2tT2CVmCluw3wYJWMZPww1uZ8tZ8bhn1Uc+qr4lF7X134B",
            "brillig_names": [
                "public_dispatch"
            ]
        }
    ],
    "outputs": {
        "globals": {
            "notes": [
                {
                    "fields": [
                        {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        },
                        {
                            "kind": "string",
                            "value": "PublicKeyNote"
                        },
                        {
                            "fields": [
                                {
                                    "name": "x",
                                    "value": {
                                        "fields": [
                                            {
                                                "name": "index",
                                                "value": {
                                                    "kind": "integer",
                                                    "sign": false,
                                                    "value": "0000000000000000000000000000000000000000000000000000000000000000"
                                                }
                                            },
                                            {
                                                "name": "nullable",
                                                "value": {
                                                    "kind": "boolean",
                                                    "value": false
                                                }
                                            }
                                        ],
                                        "kind": "struct"
                                    }
                                },
                                {
                                    "name": "y",
                                    "value": {
                                        "fields": [
                                            {
                                                "name": "index",
                                                "value": {
                                                    "kind": "integer",
                                                    "sign": false,
                                                    "value": "0000000000000000000000000000000000000000000000000000000000000001"
                                                }
                                            },
                                            {
                                                "name": "nullable",
                                                "value": {
                                                    "kind": "boolean",
                                                    "value": false
                                                }
                                            }
                                        ],
                                        "kind": "struct"
                                    }
                                },
                                {
                                    "name": "owner",
                                    "value": {
                                        "fields": [
                                            {
                                                "name": "index",
                                                "value": {
                                                    "kind": "integer",
                                                    "sign": false,
                                                    "value": "0000000000000000000000000000000000000000000000000000000000000002"
                                                }
                                            },
                                            {
                                                "name": "nullable",
                                                "value": {
                                                    "kind": "boolean",
                                                    "value": false
                                                }
                                            }
                                        ],
                                        "kind": "struct"
                                    }
                                }
                            ],
                            "kind": "struct"
                        }
                    ],
                    "kind": "tuple"
                }
            ],
            "storage": [
                {
                    "fields": [
                        {
                            "name": "contract_name",
                            "value": {
                                "kind": "string",
                                "value": "ObsidionDeployerFPC"
                            }
                        },
                        {
                            "name": "fields",
                            "value": {
                                "fields": [
                                    {
                                        "name": "signing_public_key",
                                        "value": {
                                            "fields": [
                                                {
                                                    "name": "slot",
                                                    "value": {
                                                        "kind": "integer",
                                                        "sign": false,
                                                        "value": "0000000000000000000000000000000000000000000000000000000000000001"
                                                    }
                                                }
                                            ],
                                            "kind": "struct"
                                        }
                                    }
                                ],
                                "kind": "struct"
                            }
                        }
                    ],
                    "kind": "struct"
                }
            ]
        },
        "structs": {
            "functions": [
                {
                    "fields": [
                        {
                            "name": "parameters",
                            "type": {
                                "fields": [
                                    {
                                        "name": "app_payload",
                                        "type": {
                                            "fields": [
                                                {
                                                    "name": "function_calls",
                                                    "type": {
                                                        "kind": "array",
                                                        "length": 4,
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "args_hash",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "function_selector",
                                                                    "type": {
                                                                        "fields": [
                                                                            {
                                                                                "name": "inner",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "target_address",
                                                                    "type": {
                                                                        "fields": [
                                                                            {
                                                                                "name": "inner",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "is_public",
                                                                    "type": {
                                                                        "kind": "boolean"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "is_static",
                                                                    "type": {
                                                                        "kind": "boolean"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "authwit::entrypoint::function_call::FunctionCall"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "nonce",
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                }
                                            ],
                                            "kind": "struct",
                                            "path": "authwit::entrypoint::app::AppPayload"
                                        }
                                    },
                                    {
                                        "name": "fee_payload",
                                        "type": {
                                            "fields": [
                                                {
                                                    "name": "function_calls",
                                                    "type": {
                                                        "kind": "array",
                                                        "length": 2,
                                                        "type": {
                                                            "fields": [
                                                                {
                                                                    "name": "args_hash",
                                                                    "type": {
                                                                        "kind": "field"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "function_selector",
                                                                    "type": {
                                                                        "fields": [
                                                                            {
                                                                                "name": "inner",
                                                                                "type": {
                                                                                    "kind": "integer",
                                                                                    "sign": "unsigned",
                                                                                    "width": 32
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "target_address",
                                                                    "type": {
                                                                        "fields": [
                                                                            {
                                                                                "name": "inner",
                                                                                "type": {
                                                                                    "kind": "field"
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "struct",
                                                                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "is_public",
                                                                    "type": {
                                                                        "kind": "boolean"
                                                                    }
                                                                },
                                                                {
                                                                    "name": "is_static",
                                                                    "type": {
                                                                        "kind": "boolean"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "struct",
                                                            "path": "authwit::entrypoint::function_call::FunctionCall"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "nonce",
                                                    "type": {
                                                        "kind": "field"
                                                    }
                                                },
                                                {
                                                    "name": "is_fee_payer",
                                                    "type": {
                                                        "kind": "boolean"
                                                    }
                                                }
                                            ],
                                            "kind": "struct",
                                            "path": "authwit::entrypoint::fee::FeePayload"
                                        }
                                    },
                                    {
                                        "name": "cancellable",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ],
                                "kind": "struct",
                                "path": "ObsidionDeployerFPC::entrypoint_parameters"
                            }
                        }
                    ],
                    "kind": "struct",
                    "path": "ObsidionDeployerFPC::entrypoint_abi"
                },
                {
                    "fields": [
                        {
                            "name": "parameters",
                            "type": {
                                "fields": [
                                    {
                                        "name": "inner_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ],
                                "kind": "struct",
                                "path": "ObsidionDeployerFPC::verify_private_authwit_parameters"
                            }
                        },
                        {
                            "name": "return_type",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ],
                    "kind": "struct",
                    "path": "ObsidionDeployerFPC::verify_private_authwit_abi"
                },
                {
                    "fields": [
                        {
                            "name": "parameters",
                            "type": {
                                "fields": [
                                    {
                                        "name": "max_fee",
                                        "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 128
                                        }
                                    },
                                    {
                                        "name": "nonce",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ],
                                "kind": "struct",
                                "path": "ObsidionDeployerFPC::fee_entrypoint_private_parameters"
                            }
                        }
                    ],
                    "kind": "struct",
                    "path": "ObsidionDeployerFPC::fee_entrypoint_private_abi"
                },
                {
                    "fields": [
                        {
                            "name": "parameters",
                            "type": {
                                "fields": [],
                                "kind": "struct",
                                "path": "ObsidionDeployerFPC::get_accepted_asset_parameters"
                            }
                        },
                        {
                            "name": "return_type",
                            "type": {
                                "fields": [
                                    {
                                        "name": "inner",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                        }
                    ],
                    "kind": "struct",
                    "path": "ObsidionDeployerFPC::get_accepted_asset_abi"
                },
                {
                    "fields": [
                        {
                            "name": "parameters",
                            "type": {
                                "fields": [
                                    {
                                        "name": "max_fee",
                                        "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 128
                                        }
                                    },
                                    {
                                        "name": "nonce",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ],
                                "kind": "struct",
                                "path": "ObsidionDeployerFPC::fee_entrypoint_public_parameters"
                            }
                        }
                    ],
                    "kind": "struct",
                    "path": "ObsidionDeployerFPC::fee_entrypoint_public_abi"
                },
                {
                    "fields": [
                        {
                            "name": "parameters",
                            "type": {
                                "fields": [
                                    {
                                        "name": "signing_pub_key_x",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "signing_pub_key_y",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ],
                                "kind": "struct",
                                "path": "ObsidionDeployerFPC::constructor_parameters"
                            }
                        }
                    ],
                    "kind": "struct",
                    "path": "ObsidionDeployerFPC::constructor_abi"
                }
            ]
        }
    },
    "file_map": {
        "102": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
            "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
        },
        "105": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
            "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
        },
        "107": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
            "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
        },
        "110": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
            "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
        },
        "111": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
            "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
        },
        "112": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
            "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
        },
        "114": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
            "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
        },
        "115": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
            "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
        },
        "116": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
            "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
        },
        "117": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
            "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
        },
        "12": {
            "path": "std/convert.nr",
            "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
        },
        "124": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr",
            "source": "use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n"
        },
        "125": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr",
            "source": "use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n"
        },
        "130": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
            "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n"
        },
        "132": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
            "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
        },
        "135": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/note_getter.nr",
            "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
        },
        "138": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
            "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
        },
        "141": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/note/utils.nr",
            "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
        },
        "144": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
            "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
        },
        "145": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
            "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
        },
        "146": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
            "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
        },
        "147": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
            "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
        },
        "148": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
            "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
        },
        "149": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
            "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
        },
        "152": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr",
            "source": "use crate::utils::array;\nuse dep::protocol_types::{\n    abis::nullifier_leaf_preimage::NullifierLeafPreimage, constants::NULLIFIER_TREE_HEIGHT,\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 44;\n\npub struct NullifierMembershipWitness {\n    pub index: Field,\n    pub leaf_preimage: NullifierLeafPreimage,\n    pub path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let serialized_leaf_preimage = array::subarray(fields, 1);\n\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(serialized_leaf_preimage),\n            path: array::subarray(fields, 1 + serialized_leaf_preimage.len()),\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field,\n) -> NullifierMembershipWitness {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\npub unconstrained fn get_low_nullifier_membership_witness(\n    block_number: u32,\n    nullifier: Field,\n) -> NullifierMembershipWitness {\n    get_low_nullifier_membership_witness_oracle(block_number, nullifier)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field,\n) -> NullifierMembershipWitness {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\npub unconstrained fn get_nullifier_membership_witness(\n    block_number: u32,\n    nullifier: Field,\n) -> NullifierMembershipWitness {\n    get_nullifier_membership_witness_oracle(block_number, nullifier)\n}\n"
        },
        "154": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
            "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
        },
        "155": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
            "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
        },
        "156": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
            "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
        },
        "157": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
            "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
        },
        "159": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
            "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
        },
        "16": {
            "path": "std/embedded_curve_ops.nr",
            "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
        },
        "160": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
            "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
        },
        "161": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
            "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
        },
        "166": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr",
            "source": "use dep::protocol_types::{\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator,\n    traits::Packable,\n};\n\nuse crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    lifecycle::create_note,\n    note_emission::NoteEmission,\n    note_getter::{get_note, view_notes},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateImmutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor.\n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: NoteType + NoteHash + Packable<N>,\n    {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<let N: u32>(self) -> Note\n    where\n        Note: NoteType + NoteHash + Packable<N>,\n    {\n        let storage_slot = self.storage_slot;\n        let retrieved_note = get_note(self.context, storage_slot).0;\n\n        // Because the notes obtained from PrivateImmutable are not meant to be nullified and get_note(...) function\n        // has already constrained the note (by pushing a read request to the context), we can return just the note\n        // and skip the additional data in RetrievedNote.\n        retrieved_note.note\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:is_initialized\n    pub unconstrained fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    pub unconstrained fn view_note<let N: u32>(self) -> Note\n    where\n        Note: Packable<N>,\n    {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"
        },
        "17": {
            "path": "std/field/bn254.nr",
            "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
        },
        "18": {
            "path": "std/field/mod.nr",
            "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
        },
        "187": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
            "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
        },
        "188": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
            "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
        },
        "19": {
            "path": "std/hash/mod.nr",
            "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
        },
        "190": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
            "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
        },
        "191": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
            "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
        },
        "193": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
            "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
        },
        "194": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
            "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
        },
        "196": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/field.nr",
            "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
        },
        "198": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/point.nr",
            "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
        },
        "199": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/utils/random.nr",
            "source": "use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n"
        },
        "20": {
            "path": "std/hash/poseidon2.nr",
            "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
        },
        "226": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
            "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
        },
        "25": {
            "path": "std/meta/expr.nr",
            "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
        },
        "271": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
            "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
        },
        "274": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr",
            "source": "use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
        },
        "276": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr",
            "source": "use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
        },
        "281": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr",
            "source": "use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress},\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, FromField, Hash, Serialize, ToField},\n};\n\npub struct ContractInstance {\n    pub salt: Field,\n    pub deployer: AztecAddress,\n    pub contract_class_id: ContractClassId,\n    pub initialization_hash: Field,\n    pub public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    pub fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n"
        },
        "288": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
            "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
        },
        "289": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
            "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
        },
        "290": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
            "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
        },
        "303": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
            "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
        },
        "305": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
            "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
        },
        "306": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
            "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
        },
        "315": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
            "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
        },
        "345": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
            "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
        },
        "361": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
            "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
        },
        "362": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
            "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
        },
        "364": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
            "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
        },
        "370": {
            "path": "/Users/jack-sw/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
            "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
        },
        "371": {
            "path": "/Users/jack-sw/nargo/github.com/noir-lang/schnorr/v0.1.2/src/lib.nr",
            "source": "use std::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul};\nuse std::hash::{blake2s, pedersen_hash};\n\n// the multiples of BN_P that are still less than 2^254 split into (lo, hi)\nglobal BN_P_m: [(Field, Field); 6] = [\n    (0, 0),\n    (201385395114098847380338600778089168199, 64323764613183177041862057485226039389),\n    (62488423307259231297302594124410124942, 128647529226366354083724114970452078779),\n    (263873818421358078677641194902499293141, 192971293839549531125586172455678118168),\n    (124976846614518462594605188248820249884, 257295058452732708167448229940904157558),\n    (326362241728617309974943789026909418083, 321618823065915885209310287426130196947),\n];\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\npub fn verify_signature<let N: u32>(\n    public_key: EmbeddedCurvePoint,\n    signature: [u8; 64],\n    message: [u8; N],\n) -> bool {\n    //scalar lo/hi from bytes\n    let sig_s = scalar_from_bytes(signature, 0);\n    let sig_e = scalar_from_bytes(signature, 32);\n    // pub_key is on Grumpkin curve\n    let mut is_ok = (public_key.y * public_key.y == public_key.x * public_key.x * public_key.x - 17)\n        & (!public_key.is_infinite);\n\n    if ((sig_s.lo != 0) | (sig_s.hi != 0)) & ((sig_e.lo != 0) | (sig_e.hi != 0)) {\n        let (r_is_infinite, result) =\n            calculate_signature_challenge(public_key, sig_s, sig_e, message);\n\n        is_ok &= !r_is_infinite;\n        for i in 0..32 {\n            is_ok &= result[i] == signature[32 + i];\n        }\n    } else {\n        is_ok = false;\n    }\n    is_ok\n}\n\npub fn assert_valid_signature<let N: u32>(\n    public_key: EmbeddedCurvePoint,\n    signature: [u8; 64],\n    message: [u8; N],\n) {\n    //scalar lo/hi from bytes\n    let sig_s = scalar_from_bytes(signature, 0);\n    let sig_e = scalar_from_bytes(signature, 32);\n\n    // assert pub_key is on Grumpkin curve\n    assert(public_key.y * public_key.y == public_key.x * public_key.x * public_key.x - 17);\n    assert(public_key.is_infinite == false);\n    // assert signature is not null\n    assert((sig_s.lo != 0) | (sig_s.hi != 0));\n    assert((sig_e.lo != 0) | (sig_e.hi != 0));\n\n    let (r_is_infinite, result) = calculate_signature_challenge(public_key, sig_s, sig_e, message);\n\n    assert(!r_is_infinite);\n    for i in 0..32 {\n        assert(result[i] == signature[32 + i]);\n    }\n}\n\nfn calculate_signature_challenge<let N: u32>(\n    public_key: EmbeddedCurvePoint,\n    sig_s: EmbeddedCurveScalar,\n    sig_e: EmbeddedCurveScalar,\n    message: [u8; N],\n) -> (bool, [u8; 32]) {\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    let reduced_sig_e = normalize_signature(sig_e);\n    let r = multi_scalar_mul([g1, public_key], [sig_s, reduced_sig_e]);\n    // compare the _hashes_ rather than field elements modulo r\n    let pedersen_hash = pedersen_hash([r.x, public_key.x, public_key.y]);\n    let pde: [u8; 32] = pedersen_hash.to_be_bytes();\n\n    let mut hash_input = [0; N + 32];\n    for i in 0..32 {\n        hash_input[i] = pde[i];\n    }\n    for i in 0..N {\n        hash_input[32 + i] = message[i];\n    }\n\n    let result = blake2s(hash_input);\n    (r.is_infinite, result)\n}\n\nunconstrained fn __gt(a: Field, b: Field) -> bool {\n    b.lt(a)\n}\n\n// gets the quotient of lo/hi when divided by BN254_Fq modulus\nunconstrained fn __get_quotient(hi: Field, lo: Field) -> Field {\n    let mut q: Field = 0;\n    let mut r_hi = hi;\n    let mut r_lo = lo;\n    let MODULUS = BN_P_m[1];\n\n    for _ in 1..6 {\n        // check if rhi, rlo is larger than BN_P\n        let borrow = r_lo.lt(MODULUS.0);\n\n        if borrow {\n            r_lo = r_lo + TWO_POW_128;\n            // rlo is always larger than BN_P lo now\n            r_hi = r_hi - 1;\n        }\n\n        let MODULUS_hi = MODULUS.1;\n\n        let gt_flag = !r_hi.lt(MODULUS_hi);\n\n        if gt_flag {\n            r_hi = r_hi - MODULUS.1;\n            r_lo = r_lo - MODULUS.0;\n            if TWO_POW_128.lt(r_lo) | TWO_POW_128.lt(r_hi) {\n                break;\n            }\n            q += 1;\n        }\n    }\n    q\n}\n\n// this method reduces the signature to the range [0, BN254_Fq_MODULUS)\nfn normalize_signature(sig_e: EmbeddedCurveScalar) -> EmbeddedCurveScalar {\n    let mut hi = sig_e.hi;\n    let mut lo = sig_e.lo;\n    // get the quotient\n    let q = unsafe { __get_quotient(hi, lo) };\n    let MODULUSmq = (BN_P_m[q].0, BN_P_m[q].1);\n    let MODULUS = BN_P_m[1];\n    // remove MODULUS * q from lo/hi\n    let borrow = unsafe { __gt(MODULUSmq.0, lo) };\n    // rlo, rhi is the signature without the multiple of MODULUS\n    let rlo = lo - MODULUSmq.0 + borrow as Field * TWO_POW_128;\n    let rhi = hi - borrow as Field - MODULUSmq.1;\n    // now we validate that rlo and rhi are positive\n    rlo.assert_max_bit_size::<128>();\n    rhi.assert_max_bit_size::<128>();\n    // validate that rlo, rhi is smaller than MODULUS\n    // if the lo is larger than the modulus lo we have to get a borrow\n    let borrow = unsafe { __gt(rlo, MODULUS.0) };\n    let rplo = MODULUS.0 - rlo + borrow as Field * TWO_POW_128;\n    let rphi = MODULUS.1 - rhi - borrow as Field;\n    // check that rplo and rphi are positive\n    rplo.assert_max_bit_size::<128>();\n    rphi.assert_max_bit_size::<128>();\n    EmbeddedCurveScalar::new(rlo, rhi)\n}\n\n//Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\nfn scalar_from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n    let mut v: Field = 1;\n    let mut lo: Field = 0;\n    let mut hi: Field = 0;\n    for i in 0..16 {\n        lo = lo + (bytes[offset + 31 - i] as Field) * v;\n        hi = hi + (bytes[offset + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    let sig_s = EmbeddedCurveScalar::new(lo, hi);\n    sig_s\n}\n\nmod test {\n    use super::normalize_signature;\n    use super::verify_signature;\n    use std::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar};\n\n    #[test]\n    fn test_zero_signature() {\n        let public_key: EmbeddedCurvePoint = EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860,\n            is_infinite: false,\n        };\n        let signature: [u8; 64] = [0; 64];\n        let message: [u8; _] = [2; 64]; // every message\n        let verified = verify_signature(public_key, signature, message);\n        assert(!verified);\n    }\n\n    #[test]\n    fn smoke_test() {\n        let message: [u8; 10] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n        let pub_key_x: Field = 0x04b260954662e97f00cab9adb773a259097f7a274b83b113532bce27fa3fb96a;\n        let pub_key_y: Field = 0x2fd51571db6c08666b0edfbfbc57d432068bccd0110a39b166ab243da0037197;\n        let signature: [u8; 64] = [\n            1, 13, 119, 112, 212, 39, 233, 41, 84, 235, 255, 93, 245, 172, 186, 83, 157, 253, 76,\n            77, 33, 128, 178, 15, 214, 67, 105, 107, 177, 234, 77, 48, 27, 237, 155, 84, 39, 84,\n            247, 27, 22, 8, 176, 230, 24, 115, 145, 220, 254, 122, 135, 179, 171, 4, 214, 202, 64,\n            199, 19, 84, 239, 138, 124, 12,\n        ];\n\n        let pub_key = EmbeddedCurvePoint { x: pub_key_x, y: pub_key_y, is_infinite: false };\n        let valid_signature = verify_signature(pub_key, signature, message);\n        assert(valid_signature);\n        super::assert_valid_signature(pub_key, signature, message);\n    }\n\n    #[test]\n    fn test_normalize_signature() {\n        let sig_e = EmbeddedCurveScalar::new(\n            201385395114098847380338600778112493540,\n            64323764613183177041862057485226039389,\n        );\n        let normalized = normalize_signature(sig_e);\n        let expected = EmbeddedCurveScalar::new(23325341, 0);\n        assert(normalized == expected);\n    }\n\n    #[test]\n    fn test_normalize_signature_2() {\n        let sig_e = EmbeddedCurveScalar::new(\n            263873818421358078677641194902522618482,\n            192971293839549531125586172455678118168,\n        );\n        let normalized = normalize_signature(sig_e);\n        let expected = EmbeddedCurveScalar::new(23325341, 0);\n        assert(normalized == expected);\n    }\n\n}\n\nmod bench {\n    use super::{assert_valid_signature, verify_signature};\n    use std::embedded_curve_ops::EmbeddedCurvePoint;\n\n    #[export]\n    pub fn bench_verify_signature(\n        public_key: EmbeddedCurvePoint,\n        signature: [u8; 64],\n        message: [u8; 32],\n    ) -> bool {\n        verify_signature(public_key, signature, message)\n    }\n\n    #[export]\n    pub fn bench_assert_valid_signature(\n        public_key: EmbeddedCurvePoint,\n        signature: [u8; 64],\n        message: [u8; 32],\n    ) {\n        assert_valid_signature(public_key, signature, message)\n    }\n}\n\n"
        },
        "42": {
            "path": "std/option.nr",
            "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
        },
        "43": {
            "path": "std/panic.nr",
            "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
        },
        "5": {
            "path": "std/cmp.nr",
            "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
        },
        "50": {
            "path": "/Users/jack-sw/codes/obsidion/obsidion-wallet/packages/aztec-contracts/contracts/obsidion_deployer_fpc/src/main.nr",
            "source": "mod public_key_note;\nuse dep::aztec::macros::aztec;\n\n// This is obsidion deployer contract that has a capability to sponsor any transaction\n// Basically FPC + Account contract\n\n#[aztec]\ncontract ObsidionDeployerFPC {\n    use dep::authwit::{\n        account::AccountActions,\n        auth::{compute_authwit_message_hash, compute_authwit_nullifier},\n        auth_witness::get_auth_witness,\n        entrypoint::{app::AppPayload, fee::FeePayload},\n    };\n    use dep::aztec::messages::logs::note::encode_and_encrypt_note;\n    use dep::aztec::hash::compute_siloed_nullifier;\n    use dep::aztec::macros::{\n        functions::{initializer, noinitcheck, private, view, utility},\n        storage::storage,\n    };\n    use dep::aztec::oracle::get_nullifier_membership_witness::get_low_nullifier_membership_witness;\n    use dep::aztec::prelude::{AztecAddress, PrivateContext, PrivateImmutable};\n\n    use crate::public_key_note::PublicKeyNote;\n\n    #[storage]\n    struct Storage<Context> {\n        signing_public_key: PrivateImmutable<PublicKeyNote, Context>,\n    }\n\n    ///////////////////////////////////////\n    ///////  Account Contract Logic  //////\n    ///////////////////////////////////////\n\n    // Constructs the contract\n    #[private]\n    #[initializer]\n    fn constructor(signing_pub_key_x: Field, signing_pub_key_y: Field) {\n        let this = context.this_address();\n        let pub_key_note = PublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this);\n        storage.signing_public_key.initialize(pub_key_note).emit(encode_and_encrypt_note(\n            &mut context,\n            this,\n            this,\n        ));\n    }\n\n    // Note: If you globally change the entrypoint signature don't forget to update account_entrypoint.ts file\n    // using noinitcheck is an optimization, it reduces gates by omitting a check that the contract has been initialized\n    #[private]\n    #[noinitcheck]\n    fn entrypoint(app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.entrypoint(app_payload, fee_payload, cancellable);\n    }\n\n    #[private]\n    #[noinitcheck]\n    #[view]\n    fn verify_private_authwit(inner_hash: Field) -> Field {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.verify_private_authwit(inner_hash)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, outer_hash: Field) -> bool {\n        // docs:start:is_valid_impl\n        // Load public key from storage\n        // let storage = Storage::init(context);\n        // let public_key = storage.signing_public_key.get_note();\n\n        // // Load auth witness\n        // // Safety: The witness is only used as a \"magical value\" that makes the signature verification below pass.\n        // // Hence it's safe.\n        // let witness: [Field; 64] = unsafe { get_auth_witness(outer_hash) };\n        // let mut signature: [u8; 64] = [0; 64];\n        // for i in 0..64 {\n        //     signature[i] = witness[i] as u8;\n        // }\n\n        // let pub_key = std::embedded_curve_ops::EmbeddedCurvePoint {\n        //     x: public_key.x,\n        //     y: public_key.y,\n        //     is_infinite: false,\n        // };\n        // // Verify signature of the payload bytes\n        // schnorr::verify_signature(pub_key, signature, outer_hash.to_be_bytes::<32>())\n        // docs:end:is_valid_impl\n\n        true\n    }\n\n    /**\n    * @notice Helper function to check validity of private authwitnesses\n    * @param consumer The address of the consumer of the message\n    * @param message_hash The message hash of the message to check the validity\n    * @return True if the message_hash can be consumed, false otherwise\n    */\n    #[utility]\n    unconstrained fn lookup_validity(consumer: AztecAddress, inner_hash: Field) -> pub bool {\n        let public_key = storage.signing_public_key.view_note();\n\n        let message_hash = compute_authwit_message_hash(\n            consumer,\n            context.chain_id(),\n            context.version(),\n            inner_hash,\n        );\n\n        let witness: [Field; 64] = get_auth_witness(message_hash);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n        let pub_key = std::embedded_curve_ops::EmbeddedCurvePoint {\n            x: public_key.x,\n            y: public_key.y,\n            is_infinite: false,\n        };\n        let valid_in_private =\n            schnorr::verify_signature(pub_key, signature, message_hash.to_be_bytes::<32>());\n\n        // Compute the nullifier and check if it is spent\n        // This will BLINDLY TRUST the oracle, but the oracle is us, and\n        // it is not as part of execution of the contract, so we are good.\n        let nullifier = compute_authwit_nullifier(context.this_address(), inner_hash);\n        let siloed_nullifier = compute_siloed_nullifier(consumer, nullifier);\n        let lower_wit =\n            get_low_nullifier_membership_witness(context.block_number(), siloed_nullifier);\n        let is_spent = lower_wit.leaf_preimage.nullifier == siloed_nullifier;\n\n        !is_spent & valid_in_private\n    }\n    \n    ///////////////////////////////////////\n    ///////  FPC Contract Logic  //////\n    ///////////////////////////////////////\n\n    #[private]\n    fn fee_entrypoint_private(max_fee: u128, nonce: Field) {\n        context.set_as_fee_payer();\n    }\n\n    #[private]\n    fn fee_entrypoint_public(max_fee: u128, nonce: Field) {\n        context.set_as_fee_payer();\n    }\n\n    #[private]\n    fn get_accepted_asset() -> AztecAddress {\n        context.this_address()\n    }\n}\n"
        },
        "52": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/authwit/src/account.nr",
            "source": "use dep::aztec::{\n    context::PrivateContext,\n    protocol_types::{\n        constants::{GENERATOR_INDEX__COMBINED_PAYLOAD, GENERATOR_INDEX__TX_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::Hash,\n    },\n};\n\nuse crate::auth::{compute_authwit_message_hash, IS_VALID_SELECTOR};\nuse crate::entrypoint::{app::AppPayload, fee::FeePayload};\n\npub struct AccountActions<Context> {\n    context: Context,\n    is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n}\n\nimpl<Context> AccountActions<Context> {\n    pub fn init(context: Context, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n        AccountActions { context, is_valid_impl }\n    }\n}\n\n/**\n * An implementation of the Account Action struct for the private context.\n *\n * Implements logic to verify authorization and execute payloads.\n */\nimpl AccountActions<&mut PrivateContext> {\n\n    /**\n     * Verifies that the `app_hash` and `fee_hash` are authorized and then executes them.\n     *\n     * Executes the `fee_payload` and `app_payload` in sequence.\n     * Will execute the `fee_payload` as part of the setup, and then enter the app phase.\n     *\n     * @param app_payload The payload that contains the calls to be executed in the app phase.\n     * @param fee_payload The payload that contains the calls to be executed in the setup phase.\n     */\n    // docs:start:entrypoint\n    pub fn entrypoint(self, app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let valid_fn = self.is_valid_impl;\n\n        let combined_payload_hash = poseidon2_hash_with_separator(\n            [app_payload.hash(), fee_payload.hash()],\n            GENERATOR_INDEX__COMBINED_PAYLOAD,\n        );\n        assert(valid_fn(self.context, combined_payload_hash));\n\n        fee_payload.execute_calls(self.context);\n        self.context.end_setup();\n        app_payload.execute_calls(self.context);\n        if cancellable {\n            let tx_nullifier =\n                poseidon2_hash_with_separator([app_payload.nonce], GENERATOR_INDEX__TX_NULLIFIER);\n            self.context.push_nullifier(tx_nullifier);\n        }\n    }\n    // docs:end:entrypoint\n\n    /**\n     * Verifies that the `msg_sender` is authorized to consume `inner_hash` by the account.\n     *\n     * Computes the `message_hash` using the `msg_sender`, `chain_id`, `version` and `inner_hash`.\n     * Then executes the `is_valid_impl` function to verify that the message is authorized.\n     *\n     * Will revert if the message is not authorized.\n     *\n     * @param inner_hash The hash of the message that the `msg_sender` is trying to consume.\n     */\n    // docs:start:verify_private_authwit\n    pub fn verify_private_authwit(self, inner_hash: Field) -> Field {\n        // The `inner_hash` is \"siloed\" with the `msg_sender` to ensure that only it can\n        // consume the message.\n        // This ensures that contracts cannot consume messages that are not intended for them.\n        let message_hash = compute_authwit_message_hash(\n            self.context.msg_sender(),\n            self.context.chain_id(),\n            self.context.version(),\n            inner_hash,\n        );\n        let valid_fn = self.is_valid_impl;\n        assert(valid_fn(self.context, message_hash) == true, \"Message not authorized by account\");\n        IS_VALID_SELECTOR\n    }\n    // docs:end:verify_private_authwit\n}\n"
        },
        "53": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/authwit/src/auth.nr",
            "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::ToField,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\npub global IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
        },
        "54": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/authwit/src/auth_witness.nr",
            "source": "#[oracle(getAuthWitness)]\nunconstrained fn get_auth_witness_oracle<let N: u32>(_message_hash: Field) -> [Field; N] {}\n\n/**\n * Oracle wrapper to fetch an `auth_witness` for a given `message_hash` from the PXE.\n *\n * @param message_hash The hash of the message for which the `auth_witness` is to be fetched.\n * @return The `auth_witness` for the given `message_hash` as Field array.\n */\npub unconstrained fn get_auth_witness<let N: u32>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n"
        },
        "56": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/authwit/src/entrypoint/app.nr",
            "source": "use dep::aztec::{\n    prelude::PrivateContext,\n    protocol_types::{\n        constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n        hash::poseidon2_hash_with_separator,\n        traits::{Hash, Serialize},\n    },\n};\nuse std::meta::derive;\n\nuse crate::entrypoint::function_call::FunctionCall;\n\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal APP_PAYLOAD_SIZE_IN_BYTES: u32 = 424;\n\nglobal ACCOUNT_MAX_CALLS: u32 = 4;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:app-payload-struct\n#[derive(Serialize)]\npub struct AppPayload {\n    function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n    pub nonce: Field,\n}\n// docs:end:app-payload-struct\n\nimpl Hash for AppPayload {\n    fn hash(self) -> Field {\n        poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__SIGNATURE_PAYLOAD)\n    }\n}\n\nimpl AppPayload {\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n    fn to_be_bytes(self) -> [u8; APP_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, APP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..ACCOUNT_MAX_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n\n        bytes.storage()\n    }\n\n    // Executes all private and public calls\n    // docs:start:entrypoint-execute-calls\n    pub fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_calldata_hash(\n                        call.target_address,\n                        call.args_hash,\n                        call.is_static,\n                    );\n                } else {\n                    let _result = context.call_private_function_with_args_hash(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                    );\n                }\n            }\n        }\n    }\n    // docs:end:entrypoint-execute-calls\n}\n"
        },
        "57": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/authwit/src/entrypoint/fee.nr",
            "source": "use crate::entrypoint::function_call::FunctionCall;\nuse dep::aztec::{\n    prelude::PrivateContext,\n    protocol_types::{\n        constants::GENERATOR_INDEX__FEE_PAYLOAD,\n        hash::poseidon2_hash_with_separator,\n        traits::{Hash, Serialize},\n    },\n};\nuse std::meta::derive;\n\n// 2 * 98 (FUNCTION_CALL_SIZE_IN_BYTES) + 32\nglobal FEE_PAYLOAD_SIZE_IN_BYTES: u32 = 228;\n\nglobal MAX_FEE_FUNCTION_CALLS: u32 = 2;\n\n// docs:start:fee-payload-struct\n#[derive(Serialize)]\npub struct FeePayload {\n    function_calls: [FunctionCall; MAX_FEE_FUNCTION_CALLS],\n    nonce: Field,\n    is_fee_payer: bool,\n}\n// docs:end:fee-payload-struct\n\nimpl Hash for FeePayload {\n    fn hash(self) -> Field {\n        poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__FEE_PAYLOAD)\n    }\n}\n\nimpl FeePayload {\n    fn to_be_bytes(self) -> [u8; FEE_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, FEE_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n        bytes.push(self.is_fee_payer as u8);\n\n        bytes.storage()\n    }\n\n    pub fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_calldata_hash(\n                        call.target_address,\n                        call.args_hash,\n                        call.is_static,\n                    );\n                } else {\n                    let _result = context.call_private_function_with_args_hash(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                    );\n                }\n            }\n        }\n        if self.is_fee_payer {\n            context.set_as_fee_payer();\n        }\n    }\n}\n"
        },
        "6": {
            "path": "std/collections/bounded_vec.nr",
            "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
        },
        "61": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
            "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
        },
        "69": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
            "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
        },
        "72": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
            "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
        },
        "76": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/hash.nr",
            "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
        },
        "91": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
            "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
        },
        "92": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
            "source": "use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
        },
        "93": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
            "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
        },
        "97": {
            "path": "/Users/jack-sw/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0-alpha-testnet.2/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
            "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n"
        }
    }
}
