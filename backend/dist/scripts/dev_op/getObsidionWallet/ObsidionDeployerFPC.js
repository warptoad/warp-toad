/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, Fr, loadContractArtifact, loadContractArtifactForPublic, NoteSelector, PublicKeys,
//@ts-ignore
 } from '@aztec/aztec.js';
// @ts-ignore
import ObsidionDeployerFPCContractArtifactJson from './obsidion_deployer_fpc-ObsidionDeployerFPC.json' assert { type: 'json' };
export const ObsidionDeployerFPCContractArtifact = loadContractArtifact(ObsidionDeployerFPCContractArtifactJson);
/**
 * Type-safe interface for contract ObsidionDeployerFPC;
 */
export class ObsidionDeployerFPCContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, ObsidionDeployerFPCContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, ObsidionDeployerFPCContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, signing_pub_key_x, signing_pub_key_y) {
        return new DeployMethod(PublicKeys.default(), wallet, ObsidionDeployerFPCContractArtifact, ObsidionDeployerFPCContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys, wallet, signing_pub_key_x, signing_pub_key_y) {
        return new DeployMethod(publicKeys, wallet, ObsidionDeployerFPCContractArtifact, ObsidionDeployerFPCContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeys ?? PublicKeys.default(), opts.wallet, ObsidionDeployerFPCContractArtifact, ObsidionDeployerFPCContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return ObsidionDeployerFPCContractArtifact;
    }
    /**
     * Returns this contract's artifact with public bytecode.
     */
    static get artifactForPublic() {
        return loadContractArtifactForPublic(ObsidionDeployerFPCContractArtifactJson);
    }
    static get storage() {
        return {
            signing_public_key: {
                slot: new Fr(1n),
            }
        };
    }
    static get notes() {
        return {
            PublicKeyNote: {
                id: new NoteSelector(0),
            }
        };
    }
}
